[{"title":"明日方舟Wiki数据爬取","url":"/2024/07/25/%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9FWiki%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/","content":"前言Wiki百科是动态网页，我们爬取的方法是从网页获取url再在谷歌重新打开。详细参考python爬虫实战 scrapy+selenium爬取动态网页代码源文件以及成果展示arknights_wiki或者\ngh repo clone muqiuwu/arknights_wiki\n\n如果要运行爬虫，请在项目地址运行以下代码\nscrapy crawl quotes -O quotes.json   #运行指令\n\n以下是部分代码，不是复现，仅提供思路。\n数据爬取蜘蛛头文件import scrapyfrom douban.items import DoubanItemfrom bs4 import BeautifulSoupimport pandas as pdimport matplotlib.pyplot as plt###头文件plt.rcParams[&#x27;font.sans-serif&#x27;] = &#x27;SimSun&#x27;plt.rcParams[&#x27;axes.unicode_minus&#x27;] = Falseganyuan = pd.read_excel(&#x27;干员总览.xlsx&#x27;, sheet_name=&#x27;Sheet1&#x27;)###设置中文格式\n\n干员爬取如果我们要爬取干员，有两个方法，第一种是直接在维基干员首页爬取干员信息。但这样有个问题，就是只能爬取前五十个，我的解决方法是爬取先锋干员,以此类推。\nallowed_domains = [&#x27;prts.wiki/&#x27;]start_urls = [&#x27;https://prts.wiki/w/%E5%B9%B2%E5%91%98%E4%B8%80%E8%A7%88#&#x27;]# allowed_domains = [&#x27;space.bilibili.com&#x27;] # start_urls = [&#x27;https://space.bilibili.com/1629347259/video&#x27;] # page = 10 # 如果想要爬取多页数据，需要定义爬取初始的页数，这里是10# 后续页数的网址，需要自己观察翻页后网址的变化得出规律# base_url = &#x27;https://space.bilibili.com/1629347259/video?tid=0&amp;page=&#123;&#125;&#x27;\n\n这里wiki里每一格是一个干员，我们可以写一个循环，方便爬取\n# index    //*[@id=&quot;filter-result&quot;]/div[1]# name     //*[@id=&quot;filter-result&quot;]/div[1]/div[2]/div/div[1]# cname    //*[@id=&quot;filter-result&quot;]/div[1]/div[2]/div/a/div# cname    //*[@id=&quot;filter-result&quot;]/div[1]/div[2]/div/a/div# hp       //*[@id=&quot;filter-result&quot;]/div[1]/div[4]/div[1]# atk      //*[@id=&quot;filter-result&quot;]/div[1]/div[4]/div[2]# re_ploy  //*[@id=&quot;filter-result&quot;]/div[1]/div[5]/div[1]# code     //*[@id=&quot;filter-result&quot;]/div[1]/div[2]/div/div[3]# 检查网页，得到这些信息的路径    def parse(self, response):        ###### 下面是自己对html数据的处理逻辑                movie_list = response.xpath(&quot;//*[@id=\\&quot;filter-result\\&quot;]/div&quot;)        if movie_list and len(movie_list) &gt; 0:            for movie in movie_list:                item = DoubanItem()                item[&#x27;cname&#x27;] = movie.xpath(&quot;normalize-space(./div[2]/div/a/div/text())&quot;).get()                item[&#x27;ename&#x27;] = movie.xpath(&quot;normalize-space(./div[2]/div/div[1]/text())&quot;).extract()[0]                item[&#x27;jname&#x27;] = movie.xpath(&quot;normalize-space(./div[2]/div/div[2]/text())&quot;).extract()[0]                item[&#x27;code&#x27;] = movie.xpath(&quot;normalize-space(./div[2]/div/div[3]/text())&quot;).extract()[0]                item[&#x27;sub_occupation&#x27;] = movie.xpath(&quot;normalize-space(./div[3]/div/div[1]/text())&quot;).extract()[0]                item[&#x27;influnce&#x27;] = movie.xpath(&quot;normalize-space(./div[3]/div/div[2]/text())&quot;).extract()[0]                item[&#x27;place_of_birth&#x27;] = movie.xpath(&quot;normalize-space(./div[3]/div/div[3]/text())&quot;).extract()[0]                item[&#x27;race&#x27;] = movie.xpath(&quot;normalize-space(./div[3]/div/div[4]/text())&quot;).extract()[0]                item[&#x27;hp&#x27;] = movie.xpath(&quot;normalize-space(./div[4]/div[1]/text())&quot;).get()                item[&#x27;atk&#x27;] = movie.xpath(&quot;normalize-space(./div[4]/div[2]/text())&quot;).extract()[0]                item[&#x27;defe&#x27;] = movie.xpath(&quot;normalize-space(./div[4]/div[3]/text())&quot;).extract()[0]                item[&#x27;res&#x27;] = movie.xpath(&quot;normalize-space(./div[4]/div[4]/text())&quot;).extract()[0]                item[&#x27;re_deploy&#x27;] = movie.xpath(&quot;normalize-space(./div[5]/div[1]/text())&quot;).extract()[0]                item[&#x27;cost&#x27;] = movie.xpath(&quot;normalize-space(./div[5]/div[2]/text())&quot;).extract()[0]                item[&#x27;block&#x27;] = movie.xpath(&quot;normalize-space(./div[5]/div[3]/text())&quot;).extract()[0]                item[&#x27;interval&#x27;] = movie.xpath(&quot;normalize-space(./div[5]/div[4]/text())&quot;).extract()[0]                item[&#x27;sex&#x27;] = movie.xpath(&quot;normalize-space(./div[6]/div[1]/text())&quot;).extract()[0]                item[&#x27;position&#x27;] = movie.xpath(&quot;normalize-space(./div[6]/div[2]/text())&quot;).extract()[0]                item[&#x27;obtain&#x27;] = [movie.xpath(f&quot;normalize-space(./div[7]/div[&#123;i&#125;]/text())&quot;).get()                                  for i in range(1,5)]                item[&#x27;tag&#x27;] = movie.xpath(&quot;normalize-space(./div[8]/div[1]/text())&quot;).get(),movie.xpath(&quot;normalize-space(./div[8]/div[2]/text())&quot;).extract()[0],movie.xpath(&quot;normalize-space(./div[8]/div[3]/text())&quot;).extract()[0],movie.xpath(&quot;normalize-space(./div[8]/div[4]/text())&quot;).extract()[0]                item[&#x27;feature&#x27;] = movie.xpath(&quot;normalize-space(./div[9]/div/div)&quot;).get()                yield item\n\n藏品爬取和干员爬取相似。\nallowed_domains = [&#x27;prts.wiki/&#x27;]    start_urls = [&#x27;https://prts.wiki/w/%E8%90%A8%E5%8D%A1%E5%85%B9%E7%9A%84%E6%97%A0%E7%BB%88%E5%A5%87%E8%AF%AD/%E6%83%B3%E8%B1%A1%E5%AE%9E%E4%BD%93%E5%9B%BE%E9%89%B4&#x27;]    def parse(self, response):        ###### 下面是自己对html数据的处理逻辑        # index      //*[@id=&quot;mw-content-text&quot;]/div[1]        # number     //*[@id=&quot;mw-content-text&quot;]/div[1]/table[2]/tbody/tr[1]/th[1]        #            //*[@id=&quot;mw-content-text&quot;]/div[1]/table[2]/tbody/tr[1]/th[1]         # name       //*[@id=&quot;mw-content-text&quot;]/div[1]/table[2]/tbody/tr[1]/th[2]        # cost       //*[@id=&quot;mw-content-text&quot;]/div[1]/table[2]/tbody/tr[3]/td[1]/div/span        # feature    //*[@id=&quot;mw-content-text&quot;]/div[1]/table[2]/tbody/tr[3]/td[2]/b        # story      //*[@id=&quot;mw-content-text&quot;]/div[1]/table[2]/tbody/tr[3]/td[2]/i        movie_list = response.xpath(&quot;//*[@id=\\&quot;mw-content-text\\&quot;]/div[1]/table&quot;)        if movie_list and len(movie_list) &gt; 0:            for movie in movie_list:                item = DoubanItem()                item[&#x27;numb&#x27;] = movie.xpath(&quot;normalize-space(./tbody/tr[1]/th[1]/text())&quot;).get()                item[&#x27;name&#x27;] = movie.xpath(&quot;normalize-space(./tbody/tr[1]/th[2]/text())&quot;).extract()[0]                item[&#x27;cost&#x27;] = movie.xpath(&quot;normalize-space(./tbody/tr[3]/td[1]/div/span/text())&quot;).extract()[0]                if item[&#x27;cost&#x27;]:                    item[&#x27;feature&#x27;] = movie.xpath(&quot;normalize-space(./tbody/tr[3]/td[2]/b)&quot;).get()                    item[&#x27;story&#x27;] = movie.xpath(&quot;normalize-space(./tbody/tr[3]/td[2]/i/text())&quot;).extract()[0]                else:                    item[&#x27;feature&#x27;] = movie.xpath(&quot;normalize-space(./tbody/tr[3]/td/b)&quot;).get()                    item[&#x27;story&#x27;] = movie.xpath(&quot;normalize-space(./tbody/tr[3]/td/i/text())&quot;).extract()[0]                    item[&#x27;cost&#x27;] = movie.xpath(&quot;normalize-space(./tbody/tr[4]/td/span)&quot;).get()                # item[&#x27;obtain&#x27;] = [movie.xpath(f&quot;normalize-space(./div[7]/div[&#123;i&#125;]/text())&quot;).get()                #                   for i in range(1,5)]                # item[&#x27;tag&#x27;] = movie.xpath(&quot;normalize-space(./div[8]/div[1]/text())&quot;).get(),movie.xpath(&quot;normalize-space(./div[8]/div[2]/text())&quot;).extract()[0],movie.xpath(&quot;normalize-space(./div[8]/div[3]/text())&quot;).extract()[0],movie.xpath(&quot;normalize-space(./div[8]/div[4]/text())&quot;).extract()[0]                # item[&#x27;feature&#x27;] = movie.xpath(&quot;normalize-space(./div[9]/div/div)&quot;).get()                yield item\n\nitems文件用来接收爬取的信息。只保留需要的，不需要的我一般注释掉。\n# Define here the models for your scraped items## See documentation in:# https://docs.scrapy.org/en/latest/topics/items.htmlimport scrapyclass DoubanItem(scrapy.Item):    # define the fields for your item here like:    # name = scrapy.Field()    # cname = scrapy.Field()    # ename = scrapy.Field()    # jname = scrapy.Field()    # code = scrapy.Field()    # sub_occupation = scrapy.Field()    # influnce = scrapy.Field()    # place_of_birth = scrapy.Field()    # race = scrapy.Field()    # hp = scrapy.Field()    # atk = scrapy.Field()    # defe = scrapy.Field()    # res = scrapy.Field()    # re_deploy = scrapy.Field()    # cost = scrapy.Field()    # block = scrapy.Field()    # interval = scrapy.Field()    # sex = scrapy.Field()    # position = scrapy.Field()    # obtain = scrapy.Field()    # tag = scrapy.Field()    # feature=scrapy.Field()# # 干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取    # numb =scrapy.Field()    # name =scrapy.Field()    # cost =scrapy.Field()    # feature =scrapy.Field()    # story =scrapy.Field()    # #藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取    pass\n\n数据整理将json数据转换进excel里\n干员整理import pandas as pdimport jsonfrom pathlib import Pathjson_files = [&quot;C:/Users/86183/Documents/WeChat Files/wxid_ot8jppgzo67v22/FileStorage/File/2024-07/先锋.json&quot;,              &quot;C:/Users/86183/Documents/WeChat Files/wxid_ot8jppgzo67v22/FileStorage/File/2024-07/近卫男.json&quot;,               &quot;C:/Users/86183/Documents/WeChat Files/wxid_ot8jppgzo67v22/FileStorage/File/2024-07/近卫女.json&quot;,               &quot;C:/Users/86183/Documents/WeChat Files/wxid_ot8jppgzo67v22/FileStorage/File/2024-07/狙击.json&quot;,               &quot;C:/Users/86183/Documents/WeChat Files/wxid_ot8jppgzo67v22/FileStorage/File/2024-07/术师.json&quot;,               &quot;C:/Users/86183/Documents/WeChat Files/wxid_ot8jppgzo67v22/FileStorage/File/2024-07/医疗.json&quot;,               &quot;C:/Users/86183/Documents/WeChat Files/wxid_ot8jppgzo67v22/FileStorage/File/2024-07/重装.json&quot;,               &quot;C:/Users/86183/Documents/WeChat Files/wxid_ot8jppgzo67v22/FileStorage/File/2024-07/辅助.json&quot;,               &quot;C:/Users/86183/Documents/WeChat Files/wxid_ot8jppgzo67v22/FileStorage/File/2024-07/特种.json&quot;]all_data=[]for file in json_files:    with open(file, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as f:        data = json.load(f)        all_data.extend(data)  # 将当前 JSON 文件的数据扩展到 all_data 列表中df = pd.DataFrame(all_data)data=df.rename(columns=&#123;    &#x27;cname&#x27;:&#x27;中文名&#x27;,    &#x27;ename&#x27;:&#x27;英文名&#x27;,    &#x27;jname&#x27;:&#x27;日文名&#x27;,    &#x27;code&#x27;:&#x27;编号&#x27;,    &#x27;sub_occupation&#x27;:&#x27;子职业&#x27;,    &#x27;influnce&#x27;:&#x27;归属势力&#x27;,    &#x27;place_of_birth&#x27;:&#x27;出生地&#x27;,    &#x27;race&#x27;:&#x27;种族&#x27;,    &#x27;hp&#x27;:&#x27;血量&#x27;,    &#x27;atk&#x27;:&#x27;攻击&#x27;,    &#x27;defe&#x27;:&#x27;物防&#x27;,    &#x27;res&#x27;:&#x27;法防&#x27;,    &#x27;re_deploy&#x27;:&#x27;再部署时间&#x27;,    &#x27;cost&#x27;:&#x27;费用&#x27;,    &#x27;block&#x27;:&#x27;阻挡数&#x27;,    &#x27;interval&#x27;:&#x27;攻速&#x27;,    &#x27;sex&#x27;:&#x27;性别&#x27;,    &#x27;position&#x27;:&#x27;定位&#x27;,    &#x27;obtain&#x27;:&#x27;获取方式&#x27;,    &#x27;tag&#x27;:&#x27;标签&#x27;,    &#x27;feature&#x27;:&#x27;特性&#x27;    &#125;)data.to_excel(&#x27;干员总览.xlsx&#x27;, index=False)  # 如果不需要保存索引列，可以设置index参数为False\n\n藏品整理import pandas as pdimport jsonfrom pathlib import Pathjson_files = [&quot;C:/Users/86180/OneDrive/桌面/python/douban/quotes.json&quot;]all_data=[]for file in json_files:    with open(file, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as f:        data = json.load(f)        all_data.extend(data)  # 将当前 JSON 文件的数据扩展到 all_data 列表中df = pd.DataFrame(all_data)data=df.rename(columns=&#123;    &#x27;numb&#x27;:&#x27;编号&#x27;,    &#x27;name&#x27;:&#x27;名字&#x27;,    &#x27;cost&#x27;:&#x27;获取&#x27;,    &#x27;feature&#x27;:&#x27;效果&#x27;,    &#x27;story&#x27;:&#x27;故事&#x27;    &#125;)data.to_excel(&#x27;萨卡兹的无终奇语想象实体图鉴.xlsx&#x27;, index=False)  # 如果不需要保存索引列，可以设置index参数为False\n\n数据分析饼状图df=pd.read_excel(&quot;C:/Users/86183/Desktop/总览/json to csv or excel/干员总览.xlsx&quot;,sheet_name=&#x27;Sheet1&#x27;)# 查看读取的数据df.head()# 打印前几行数据\n\npower_count = df[&#x27;所属势力&#x27;].value_counts().reset_index()#df中所属势力下的所有值数个数排成dataframe，重新设置index# print(power_count)temp = 10  # 设定频数界限than_ten = power_count[power_count[&#x27;count&#x27;] &gt;= temp].copy()lower_than_ten_sum = power_count[power_count[&#x27;count&#x27;] &lt; temp][&#x27;count&#x27;].sum()# 将小于频数界限的数据合并到一个 &#x27;其他&#x27; 类别other_row = pd.DataFrame([&#123;&#x27;所属势力&#x27;: &#x27;其他&#x27;, &#x27;count&#x27;: lower_than_ten_sum&#125;])result=pd.concat([than_ten,other_row])# 可选的饼图配置explode = [0.02] * len(result)  # 各个分块的间距colors = [&#x27;lavender&#x27;, &#x27;g&#x27;, &#x27;r&#x27;, &#x27;c&#x27;, &#x27;m&#x27;, &#x27;y&#x27;, &#x27;cyan&#x27;, &#x27;pink&#x27;, &#x27;orange&#x27;, &#x27;grey&#x27;][:len(than_ten)]# 绘制饼图plt.figure(figsize=(20, 20))plt.pie(result[&#x27;count&#x27;], explode=explode, labels=result[&#x27;所属势力&#x27;],        colors=colors, autopct=&#x27;%2.1f%%&#x27;, textprops=&#123;&#x27;fontsize&#x27;: 24&#125;)plt.title(&#x27;干员所属势力分布饼图&#x27;)plt.savefig(&#x27;干员所属势力分布饼图.png&#x27;)plt.show()\n\n直方图# 读取数据df=pd.read_excel(&quot;C:/Users/86180/OneDrive/桌面/python/干员总览.xlsx&quot;,sheet_name=&#x27;Sheet1&#x27;)# 定义一个生成直方图的方法，参数有：‘标题’，标题大小，‘x轴名’，‘y轴名’，x轴旋转，x轴大小，y轴大小def plot_bar_set(title,title_fontsize, xlabel, ylabel, x_rotation=0, x_fontsize=14, y_fontsize=14):    plt.title(title,fontsize=title_fontsize)    plt.xlabel(xlabel)    plt.ylabel(ylabel)    plt.xticks(rotation=x_rotation, fontsize=x_fontsize)    plt.yticks(fontsize=y_fontsize)# 查看读取的数据df.head()# 打印前几行数据\n\n# 使用df[&#x27;子职业&#x27;].value_counts()统计了DataFrame df中&#x27;子职业&#x27;列的每个唯一值的出现次数，并将结果存储在grouped变量中。grouped = df[&#x27;子职业&#x27;].value_counts().reset_index()# 绘制了柱状图，x轴为&#x27;子职业&#x27;，y轴为&#x27;count&#x27;，数据源为groupedplt.figure(figsize=(120,40))# 绘制了柱状图，x轴为&#x27;子职业&#x27;，y轴为&#x27;count&#x27;，数据源为groupedplt.bar(&#x27;子职业&#x27;,&#x27;count&#x27;,data=grouped,width=0.7)plot_bar_set(&#x27;干员子职业分布统计&#x27;,150,&#x27;子职业&#x27;,&#x27;个数&#x27;,45,64,64)# 保存plt.savefig(&#x27;干员子职业总览.png&#x27;)\n\n散点图#  提取攻击和血量数据attack = df[&#x27;攻击&#x27;]hp = df[&#x27;血量&#x27;]#  绘制散点图plt.figure(figsize=(10, 6))  # 设置图的大小plt.scatter(hp,attack, marker=&#x27;o&#x27;, color=&#x27;blue&#x27;, alpha=0.5)  # 绘制散点图plt.title(&#x27;干员攻击与血量散点图&#x27;)  # 设置图的标题plt.xlabel(&#x27;血量&#x27;)  # 设置 x 轴标签plt.ylabel(&#x27;攻击&#x27;)  # 设置 y 轴标签plt.grid(True)  # 添加网格线plt.tight_layout()  # 调整布局，防止标签被切割plt.savefig(&#x27;干员攻击与血量散点图.png&#x27;)plt.show()  # 显示图形\n\n子职业相关这里比较多我们只展示其中之一————DPS\nimport pandas as pdimport openpyxlimport matplotlib.pyplot as plt# 设置中文及字符显示plt.rcParams[&#x27;font.sans-serif&#x27;] = &#x27;SimSun&#x27;plt.rcParams[&#x27;axes.unicode_minus&#x27;] = Falsedf = pd.read_excel(&#x27;干员总览.xlsx&#x27;, sheet_name=&#x27;Sheet1&#x27;)df.head()df[&#x27;攻速&#x27;] = df[&#x27;攻速&#x27;].str.replace(&#x27;s&#x27;, &#x27;&#x27;).astype(float)df[&#x27;普攻DPS&#x27;] = df[&#x27;攻击&#x27;] / df[&#x27;攻速&#x27;]df_sorted = df.sort_values(by=&#x27;子职业&#x27;)average_dps = (df_sorted.groupby(&#x27;子职业&#x27;)[&#x27;普攻DPS&#x27;].mean().reset_index())average_dps = average_dps.sort_values(by=&#x27;普攻DPS&#x27;)output_file = &#x27;干员普攻DPS统计.xlsx&#x27;with pd.ExcelWriter(output_file, engine=&#x27;openpyxl&#x27;) as writer:    average_dps.to_excel(writer, sheet_name=&#x27;普攻DPS统计&#x27;, index=False)plt.figure(figsize=(80, 40))plt.bar(average_dps[&#x27;子职业&#x27;], average_dps[&#x27;普攻DPS&#x27;], color=&#x27;skyblue&#x27;)plt.xticks(fontsize=60)plt.yticks(fontsize=60)plt.xlabel(&#x27;子职业&#x27;,fontsize=60)plt.ylabel(&#x27;平均普攻DPS&#x27;,fontsize=60)plt.title(&#x27;不同子职业的平均普攻DPS&#x27;,fontsize=60)plt.xticks(rotation=45)plt.tight_layout()plt.savefig(&#x27;平均普攻DPS柱状图.png&#x27;)plt.show()\n\n部分成果\n改进我们发现Wiki角色的详细界面的格式均为https://prts.wiki/w/nymph我们可以通过爬取的信息重写一个爬虫，循环爬取所有的角色详情页面。\n","categories":["代码项目"],"tags":["python","明日方舟","爬虫","游戏"]},{"title":"Hello World","url":"/2024/07/24/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"音响/音乐小夜灯","url":"/2024/07/28/%E9%9F%B3%E5%93%8D-%E9%9F%B3%E4%B9%90%E5%B0%8F%E5%A4%9C%E7%81%AF/","content":"前言这是我们在大一学业空闲时间的小作品，一个印象+一个小夜灯，目前都已投入使用^ ^参与这个作品的两位嗣凌sama和the RUN我们参考了zutterhao的开源代码https://www.cnblogs.com/zutterhao/p/10140172.html以下是我们的库音乐小夜灯你也可以通过在终端运行以下代码下载\ngit clone git@gitee.com:Siling402/light.gitgit clone https://gitee.com/Siling402/light.git ##任选一行执行\n\n由于我们是第一次制作花费了很多耗材 &gt; &lt; 如果你要复刻记得多买点材料！！\n耗材奥松机器人声音传感器\ncc2541蓝牙模块板4.0\nArduino UNO\nWS2812B\n等，详细材料前面的两个参考链接里有。\n音响展示视频：音响视频\n\n\n小夜灯展示视频：小夜灯视频\n\n\n\n","categories":["手工"],"tags":["arduino","手工","课程设计"]},{"title":"小刻横板卷轴格斗游戏","url":"/2024/07/28/%E5%B0%8F%E5%88%BB%E6%A8%AA%E6%9D%BF%E5%8D%B7%E8%BD%B4%E6%A0%BC%E6%96%97%E6%B8%B8%E6%88%8F/","content":"\n\n前言这是我大一课余自学UE5制作的一个简陋的纯蓝图小游戏，嗣凌sama和the RUN帮忙绘制了大部分敌人的动作\n如果你想体验游戏，你可以从这个链接获取\n链接：百度网盘提取码：0eqd\n我们的所有自制素材也可以通过以下链接获取！\n链接：百度网盘提取码：s3bf\n项目的github地址：Ceobe2d\n感谢支持！\n^ ^\n预览大一课余自制的明日方舟小游戏\n \n","categories":["游戏项目"],"tags":["明日方舟","游戏","课程设计","Unreal Engine","同人游戏","UE蓝图"]},{"title":"UE5学习笔记-1-camera-spring-paperflipbook-inputmapping","url":"/2024/08/03/UE5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1-camera-spring-paperflipbook-inputmapping/","content":"UPROPERTYUPROPERTY可以使变量在引擎中编辑。\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Camera,mata = (ClampMin = -5, ClampMax = 5))int a;// 这样就能在引擎中编辑a了。//EditAnywhere任何位置可编辑，//BlueprintReadWrite蓝图读写，//Category = Camera分类为camera，//mata = (ClampMin = -5, ClampMax = 5)编辑器中变量滑块，最小值为-5，最大5\n\nUFUNCTIONUFUNCTION可以使函数可在蓝图编辑器里使用。\n在MyActor里创建在.h文件里声明函数\npublic:    int SetNum(int a);\n\n点击改锥一键在.cpp文件里定义函数\nint AMyActor::SetNum(int a)&#123;    return 0;&#125;\n\n在.h文件中的声明之前加上UFUNCTION:\npublic:    UFUNCTION(BlueprintCallable,Category = &quot;My&quot; )    int SetNum(int a);\n\n这样就能在蓝图中调用SetNum啦。  ^ ^\n创建角色创建控制角色–在ue引擎里创建C++，character类–MyCharacter。\n创建基于MyCharacter的子蓝图，可以在蓝图里更改相关信息。（添加网格体）\n打开C++文件\n添加摄像机，摄像机臂在.cpp文件里添加头文件\n#include &quot;Camera/CameraComponent.h&quot;#include &quot;GameFramework/SpringArmComponent.h&quot;\n\n在.h文件里声明摄像机，摄像机臂\npublic: // Sets default values for this character&#x27;s properties AMyCharacter(); //添加摄像机 UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Camera) class UCameraComponent* P_Camera; //添加摄像机臂 UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Camera) class USpringArmComponent* CameraSpring;\n\n在.cpp文件中加入相机臂和相机代码\n//设置摄像机臂CameraSpring = CreateDefaultSubobject&lt;USpringArmComponent&gt;(TEXT(&quot;CameraSpring&quot;));CameraSpring-&gt;SetupAttachment(RootComponent);CameraSpring-&gt;bDoCollisionTest = false;CameraSpring-&gt;bUsePawnControlRotation = true;//设置摄像机臂旋转//设置摄像机P_Camera = CreateDefaultSubobject&lt;UCameraComponent&gt;(TEXT(&quot;P_Camera&quot;));P_Camera-&gt;SetupAttachment(CameraSpring);\n\n其他设置设置弹簧臂相对旋转不能使弹簧臂旋转，所以我旋转不设置弹簧臂长度，设置弹簧臂插座偏移\n//设置一个摄像机或其他对象是否使用绝对旋转CameraSpring-&gt;SetUsingAbsoluteRotation(true); // Don&#x27;t want arm to rotate when character doesCameraSpring-&gt;TargetArmLength = 0.f;//设置Springarm的相对旋转CameraSpring-&gt;SetWorldRotation(FRotator(-90.f, 0.f, 0.f));//设置spring插座偏移CameraSpring-&gt;SocketOffset = FVector(0, 0, 600);\n\n增强输入移动移动输入映射头文件中声明in public\n//角色移动输入UPROPERTY(EditAnywhere, BlueprintReadOnly, meta = (AllowPrivateAccess = &quot;true&quot;), Category = Input)class UInputAction* IA_Move;//输入映射UPROPERTY(EditAnywhere, BlueprintReadOnly, meta = (AllowPrivateAccess = &quot;true&quot;), Category = Input)class UInputMappingContext* InputMapping;\n\nin protected\nvoid Move(const FInputActionValue&amp; Value);\n\nin .cppvoid AMyCharacter::BeginPlay()添加，或者改锥一键生成。\n// 增强输入：移动输入void AMyCharacter::Move(const FInputActionValue&amp; Value)&#123; // input is a Vector2D FVector2D MovementVector = Value.Get&lt;FVector2D&gt;(); if (Controller != nullptr) &#123;  // find out which way is forward  const FRotator Rotation = Controller-&gt;GetControlRotation();  const FRotator YawRotation(0, Rotation.Yaw, 0);  // get forward vector  const FVector ForwardDirection = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);  // get right vector   const FVector RightDirection = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::Y);  // add movement   AddMovementInput(ForwardDirection, MovementVector.Y);  AddMovementInput(RightDirection, MovementVector.X); &#125;&#125;\n\n增强输入绑定void AMyCharacter::Tick(float DeltaTime)\n// Called to bind functionality to input// 增强输入的绑定void AMyCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)&#123; Super::SetupPlayerInputComponent(PlayerInputComponent); // Add Input Mapping Context if (APlayerController* PlayerController = Cast&lt;APlayerController&gt;(GetController())) &#123;  if (UEnhancedInputLocalPlayerSubsystem* Subsystem = ULocalPlayer::GetSubsystem&lt;UEnhancedInputLocalPlayerSubsystem&gt;(PlayerController-&gt;GetLocalPlayer()))  &#123;   Subsystem-&gt;AddMappingContext(InputMapping, 0);  &#125; &#125; // Set up action bindings if (UEnhancedInputComponent* EnhancedInputComponent = Cast&lt;UEnhancedInputComponent&gt;(PlayerInputComponent)) &#123;  // Jumping  //EnhancedInputComponent-&gt;BindAction(IA_Jump, ETriggerEvent::Started, this, &amp;AMyCharacter::Jump);  //EnhancedInputComponent-&gt;BindAction(IA_Jump, ETriggerEvent::Completed, this, &amp;AMyCharacter::StopJumping);  // Moving  EnhancedInputComponent-&gt;BindAction(IA_Move, ETriggerEvent::Triggered, this, &amp;AMyCharacter::Move);  //ETriggerEvent::Triggered 持续触发 Started 单次触发  // Looking  //EnhancedInputComponent-&gt;BindAction(IA_Look, ETriggerEvent::Triggered, this, &amp;ATgameCharacter::Look); &#125; else &#123;  //错误日志  //UE_LOG(LogTemplateCharacter, Error, TEXT(&quot;&#x27;%s&#x27; Failed to find an Enhanced Input component! This template is built to use the Enhanced Input system. If you intend to use the legacy system, then you will need to update this C++ file.&quot;), *GetNameSafe(this)); &#125;&#125;\n\n最后在引擎中建立蓝图IA_move,IMC_Default,编辑好输入映射。再在角色蓝图中将变量IA_Move，InputMapping赋值为上面两个蓝图，角色就可以移动了。\n视角角色旋转.hpublic\n//角色旋转UPROPERTY(EditAnywhere, BlueprintReadOnly, meta = (AllowPrivateAccess = &quot;true&quot;), Category = Input)class UInputAction* IA_Look;\n\nprotected:\nvoid Look(const FInputActionValue&amp; Value);\n\n改锥一键生成in .cpp\nvoid AMyCharacter::Look(const FInputActionValue&amp; Value)&#123; // input is a vector2D FVector2D LookAxisVector = Value.Get&lt;FVector2D&gt;(); if(Controller != nullptr) &#123;  // add yaw and pitch input to controller  AddControllerYawInput(LookAxisVector.X);  AddControllerPitchInput(LookAxisVector.Y); &#125;&#125;\n\n增强输入修改修改增强输入绑定部分。\n// Called to bind functionality to input// 增强输入的绑定void AMyCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)&#123; Super::SetupPlayerInputComponent(PlayerInputComponent); // Add Input Mapping Context if (APlayerController* PlayerController = Cast&lt;APlayerController&gt;(GetController())) &#123;  if (UEnhancedInputLocalPlayerSubsystem* Subsystem = ULocalPlayer::GetSubsystem&lt;UEnhancedInputLocalPlayerSubsystem&gt;(PlayerController-&gt;GetLocalPlayer()))  &#123;   Subsystem-&gt;AddMappingContext(InputMapping, 0);  &#125; &#125; // Set up action bindings if (UEnhancedInputComponent* EnhancedInputComponent = Cast&lt;UEnhancedInputComponent&gt;(PlayerInputComponent)) &#123;  // Jumping  //EnhancedInputComponent-&gt;BindAction(IA_Jump, ETriggerEvent::Started, this, &amp;AMyCharacter::Jump);  //EnhancedInputComponent-&gt;BindAction(IA_Jump, ETriggerEvent::Completed, this, &amp;AMyCharacter::StopJumping);  // Moving  EnhancedInputComponent-&gt;BindAction(IA_Move, ETriggerEvent::Triggered, this, &amp;AMyCharacter::Move);  //ETriggerEvent::Triggered 持续触发 Started 单次触发  // Looking  EnhancedInputComponent-&gt;BindAction(IA_Look, ETriggerEvent::Triggered, this, &amp;AMyCharacter::Look); &#125; else &#123;  //错误日志  //UE_LOG(LogTemplateCharacter, Error, TEXT(&quot;&#x27;%s&#x27; Failed to find an Enhanced Input component! This template is built to use the Enhanced Input system. If you intend to use the legacy system, then you will need to update this C++ file.&quot;), *GetNameSafe(this)); &#125;&#125;\n\n最后在角色蓝图中绑定IA_Look.\n视角限制在cpp,beginplay中设置.通过方法ViewPitchMax&#x2F;Min.\n//设置俯仰视角范围APlayerController* PlayerControl = Cast&lt;APlayerController&gt;(Controller);PlayerControl-&gt;PlayerCameraManager-&gt;ViewPitchMax = 45.0f;PlayerControl-&gt;PlayerCameraManager-&gt;ViewPitchMin = -45.0f;\n\n角色跳跃.h\n//角色跳跃UPROPERTY(EditAnywhere, BlueprintReadOnly, meta = (AllowPrivateAccess = &quot;true&quot;), Category = Input)class UInputAction* IA_Jump;\n\n修改增强输入绑定.cpp\n// Called to bind functionality to input// 增强输入的绑定void AMyCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)&#123; Super::SetupPlayerInputComponent(PlayerInputComponent); // Add Input Mapping Context if (APlayerController* PlayerController = Cast&lt;APlayerController&gt;(GetController())) &#123;  if (UEnhancedInputLocalPlayerSubsystem* Subsystem = ULocalPlayer::GetSubsystem&lt;UEnhancedInputLocalPlayerSubsystem&gt;(PlayerController-&gt;GetLocalPlayer()))  &#123;   Subsystem-&gt;AddMappingContext(InputMapping, 0);  &#125; &#125; // Set up action bindings if (UEnhancedInputComponent* EnhancedInputComponent = Cast&lt;UEnhancedInputComponent&gt;(PlayerInputComponent)) &#123;  // Jumping  EnhancedInputComponent-&gt;BindAction(IA_Jump, ETriggerEvent::Started, this, &amp;AMyCharacter::Jump);  EnhancedInputComponent-&gt;BindAction(IA_Jump, ETriggerEvent::Completed, this, &amp;AMyCharacter::StopJumping);  // Moving  EnhancedInputComponent-&gt;BindAction(IA_Move, ETriggerEvent::Triggered, this, &amp;AMyCharacter::Move);  //ETriggerEvent::Triggered 持续触发 Started 单次触发  // Looking  EnhancedInputComponent-&gt;BindAction(IA_Look, ETriggerEvent::Triggered, this, &amp;AMyCharacter::Look); &#125; else &#123;  //错误日志  //UE_LOG(LogTemplateCharacter, Error, TEXT(&quot;&#x27;%s&#x27; Failed to find an Enhanced Input component! This template is built to use the Enhanced Input system. If you intend to use the legacy system, then you will need to update this C++ file.&quot;), *GetNameSafe(this)); &#125;&#125;\n\n这里直接用了引擎自带的封装好的jump函数，没有覆写。\n限制跳跃高度.hMyCaracter\n// 设置跳跃速度GetCharacterMovement()-&gt;JumpZVelocity = 300.f;\n\n最后在角色蓝图中设置IA_Jump就ok了。\n设置2DFlipbook在.build.cs文件中插入PaperZD插件，我用了Resharper直接生成，应该有别的更改。会生成一个PaperZDCharacter.h文件。\nPrivateDependencyModuleNames.AddRange(new string[] &#123; &quot;Paper2D&quot; &#125;);\n\n这样就能使用sprite和flipbook了。\n在.h文件里\n//精灵UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Character, meta = (AllowPrivateAccess = &quot;true&quot;))class UPaperFlipbookComponent* P_Flipbook;\n\n在cpp文件里\nP_Flipbook = CreateDefaultSubobject&lt;UPaperFlipbookComponent&gt;(TEXT(&quot;P_Flipbook&quot;));\n\n默认生成在胶囊体的子组件，如果不是，重新在头文件里声明一个胶囊体，再用SetUpAttachment()函数解决。\n","categories":["笔记"],"tags":["Unreal Engine","学习","UEC++","C++","笔记"]},{"title":"长沙旅行日志-24/8/9","url":"/2024/08/09/%E9%95%BF%E6%B2%99%E6%97%85%E8%A1%8C%E6%97%A5%E5%BF%97-24-8-9/","content":"\n\n\n长沙地质博物馆\n长沙省博物馆\n湘江夜景\n毛泽东青年\n\n\n李自建美术馆\n\n\n\n\n文和友\n\n\n\n\n","categories":["生活"],"tags":["生活","旅行"]},{"title":"多模态融合学习","url":"/2024/07/25/%E5%A4%9A%E6%A8%A1%E6%80%81%E8%9E%8D%E5%90%88%E5%AD%A6%E4%B9%A0/","content":"前言该项目由牛马主要负责，我主要起一个蹭的作用，跟着学习学习哈哈。\n问题介绍在多模态学习领域，如何通过图像生成文本，进而进行自然语言处理（生成故事）以及语音合成。作者对此颇感兴趣。本项目旨在通过上传图片，利用预训练的模型自动生成文本描述，再进一步扩展为故事，最后通过语音技术进行中文朗读。\n相关工作图像描述生成利用OpenAI 的 CLIP（暂定） 和 Hugging Face 的 BLIP 模型进行图像描述生成\n文本生成通过调用现成的LLM，对短文本进行拓展。\n中文翻译与语音合成当前主流的翻译与语音合成技术（MarianMT、百度 TTS 等），利用他们或者尝试hugging face 的模型进行合成\n关键算法利用CNN对图像的特征进行提取，图像描述方面使用RNN（或者transformer架构）。对于文本语言生成，将使用大语言模型，比如GPT（使用transformer架构）或者国内一些较好的预训练文本模型。文本转语音：hugging face的transformer里面有一个包pipeline就承担了分词器的作用，通过分词以及对标点符号进行处理，以tacotron生成。最后用声码器处理。\n改进技术路线多模态生成的优化在预训练模型的基础上，微调模型，使生成的描述和故事更加贴合图片内容。\n多模态各个模块的结合计划使用Langchain将图像描述生成、文本扩展与语音合成多任务流程打通，确保各模块高效协作。实现多轮交互，提高生成内容的丰富性与灵活性。\n用户友好页面制作用户不需要看懂代码，也不需要面对黑漆漆的终端，计划基于Streamlit设计一个UI界面，可以直接对需要识别的图片进行拖动。\n实验设计实验数据使用 Hugging Face 的模型进行实验，选择多种类型的图片作为输入测试集。\n实验流程图片描述生成实验：测试图像到文本的生成效果。\n故事生成实验基于描述生成完整故事，并分析生成内容的流畅度与合理性。\n翻译实验测试英文故事翻译成中文的准确性。\n语音合成实验对中文文本进行语音合成，分析语音输出的流畅度和自然性。\n评估指标图像描述生成的准确性使用 BLEU 评分评价描述生成效果。\n故事生成的质量通过人工评价故事的连贯性和创造性。\n翻译准确度用 BLEU 分数评价英文到中文的翻译效果。\n语音合成质量通过主观评分系统评估语音的自然度。\n","categories":["代码项目"],"tags":["python","AI","多模态","CNN","RNN","图像描述生成","文本生成","中文翻译与语音合成"]},{"title":"game","url":"/game/index.html","content":""},{"title":"archives","url":"/archives/index.html","content":""},{"title":"archives","url":"/archives/index-1.html","content":""}]