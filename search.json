[{"title":"UE5学习笔记-1-camera-spring-paperflipbook-inputmapping","url":"/2024/08/03/UE5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1-camera-spring-paperflipbook-inputmapping/","content":"UPROPERTYUPROPERTY可以使变量在引擎中编辑。\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Camera,mata = (ClampMin = -5, ClampMax = 5))int a;// 这样就能在引擎中编辑a了。//EditAnywhere任何位置可编辑，//BlueprintReadWrite蓝图读写，//Category = Camera分类为camera，//mata = (ClampMin = -5, ClampMax = 5)编辑器中变量滑块，最小值为-5，最大5\n\nUFUNCTIONUFUNCTION可以使函数可在蓝图编辑器里使用。\n在MyActor里创建在.h文件里声明函数\npublic:    int SetNum(int a);\n\n点击改锥一键在.cpp文件里定义函数\nint AMyActor::SetNum(int a)&#123;    return 0;&#125;\n\n在.h文件中的声明之前加上UFUNCTION:\npublic:    UFUNCTION(BlueprintCallable,Category = &quot;My&quot; )    int SetNum(int a);\n\n这样就能在蓝图中调用SetNum啦。  ^ ^\n创建角色创建控制角色–在ue引擎里创建C++，character类–MyCharacter。\n创建基于MyCharacter的子蓝图，可以在蓝图里更改相关信息。（添加网格体）\n打开C++文件\n添加摄像机，摄像机臂在.cpp文件里添加头文件\n#include &quot;Camera/CameraComponent.h&quot;#include &quot;GameFramework/SpringArmComponent.h&quot;\n\n在.h文件里声明摄像机，摄像机臂\npublic: // Sets default values for this character&#x27;s properties AMyCharacter(); //添加摄像机 UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Camera) class UCameraComponent* P_Camera; //添加摄像机臂 UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Camera) class USpringArmComponent* CameraSpring;\n\n在.cpp文件中加入相机臂和相机代码\n//设置摄像机臂CameraSpring = CreateDefaultSubobject&lt;USpringArmComponent&gt;(TEXT(&quot;CameraSpring&quot;));CameraSpring-&gt;SetupAttachment(RootComponent);CameraSpring-&gt;bDoCollisionTest = false;CameraSpring-&gt;bUsePawnControlRotation = true;//设置摄像机臂旋转//设置摄像机P_Camera = CreateDefaultSubobject&lt;UCameraComponent&gt;(TEXT(&quot;P_Camera&quot;));P_Camera-&gt;SetupAttachment(CameraSpring);\n\n其他设置设置弹簧臂相对旋转不能使弹簧臂旋转，所以我旋转不设置弹簧臂长度，设置弹簧臂插座偏移\n//设置一个摄像机或其他对象是否使用绝对旋转CameraSpring-&gt;SetUsingAbsoluteRotation(true); // Don&#x27;t want arm to rotate when character doesCameraSpring-&gt;TargetArmLength = 0.f;//设置Springarm的相对旋转CameraSpring-&gt;SetWorldRotation(FRotator(-90.f, 0.f, 0.f));//设置spring插座偏移CameraSpring-&gt;SocketOffset = FVector(0, 0, 600);\n\n增强输入移动移动输入映射头文件中声明in public\n//角色移动输入UPROPERTY(EditAnywhere, BlueprintReadOnly, meta = (AllowPrivateAccess = &quot;true&quot;), Category = Input)class UInputAction* IA_Move;//输入映射UPROPERTY(EditAnywhere, BlueprintReadOnly, meta = (AllowPrivateAccess = &quot;true&quot;), Category = Input)class UInputMappingContext* InputMapping;\n\nin protected\nvoid Move(const FInputActionValue&amp; Value);\n\nin .cppvoid AMyCharacter::BeginPlay()添加，或者改锥一键生成。\n// 增强输入：移动输入void AMyCharacter::Move(const FInputActionValue&amp; Value)&#123; // input is a Vector2D FVector2D MovementVector = Value.Get&lt;FVector2D&gt;(); if (Controller != nullptr) &#123;  // find out which way is forward  const FRotator Rotation = Controller-&gt;GetControlRotation();  const FRotator YawRotation(0, Rotation.Yaw, 0);  // get forward vector  const FVector ForwardDirection = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);  // get right vector   const FVector RightDirection = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::Y);  // add movement   AddMovementInput(ForwardDirection, MovementVector.Y);  AddMovementInput(RightDirection, MovementVector.X); &#125;&#125;\n\n增强输入绑定void AMyCharacter::Tick(float DeltaTime)\n// Called to bind functionality to input// 增强输入的绑定void AMyCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)&#123; Super::SetupPlayerInputComponent(PlayerInputComponent); // Add Input Mapping Context if (APlayerController* PlayerController = Cast&lt;APlayerController&gt;(GetController())) &#123;  if (UEnhancedInputLocalPlayerSubsystem* Subsystem = ULocalPlayer::GetSubsystem&lt;UEnhancedInputLocalPlayerSubsystem&gt;(PlayerController-&gt;GetLocalPlayer()))  &#123;   Subsystem-&gt;AddMappingContext(InputMapping, 0);  &#125; &#125; // Set up action bindings if (UEnhancedInputComponent* EnhancedInputComponent = Cast&lt;UEnhancedInputComponent&gt;(PlayerInputComponent)) &#123;  // Jumping  //EnhancedInputComponent-&gt;BindAction(IA_Jump, ETriggerEvent::Started, this, &amp;AMyCharacter::Jump);  //EnhancedInputComponent-&gt;BindAction(IA_Jump, ETriggerEvent::Completed, this, &amp;AMyCharacter::StopJumping);  // Moving  EnhancedInputComponent-&gt;BindAction(IA_Move, ETriggerEvent::Triggered, this, &amp;AMyCharacter::Move);  //ETriggerEvent::Triggered 持续触发 Started 单次触发  // Looking  //EnhancedInputComponent-&gt;BindAction(IA_Look, ETriggerEvent::Triggered, this, &amp;ATgameCharacter::Look); &#125; else &#123;  //错误日志  //UE_LOG(LogTemplateCharacter, Error, TEXT(&quot;&#x27;%s&#x27; Failed to find an Enhanced Input component! This template is built to use the Enhanced Input system. If you intend to use the legacy system, then you will need to update this C++ file.&quot;), *GetNameSafe(this)); &#125;&#125;\n\n最后在引擎中建立蓝图IA_move,IMC_Default,编辑好输入映射。再在角色蓝图中将变量IA_Move，InputMapping赋值为上面两个蓝图，角色就可以移动了。\n视角角色旋转.hpublic\n//角色旋转UPROPERTY(EditAnywhere, BlueprintReadOnly, meta = (AllowPrivateAccess = &quot;true&quot;), Category = Input)class UInputAction* IA_Look;\n\nprotected:\nvoid Look(const FInputActionValue&amp; Value);\n\n改锥一键生成in .cpp\nvoid AMyCharacter::Look(const FInputActionValue&amp; Value)&#123; // input is a vector2D FVector2D LookAxisVector = Value.Get&lt;FVector2D&gt;(); if(Controller != nullptr) &#123;  // add yaw and pitch input to controller  AddControllerYawInput(LookAxisVector.X);  AddControllerPitchInput(LookAxisVector.Y); &#125;&#125;\n\n增强输入修改修改增强输入绑定部分。\n// Called to bind functionality to input// 增强输入的绑定void AMyCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)&#123; Super::SetupPlayerInputComponent(PlayerInputComponent); // Add Input Mapping Context if (APlayerController* PlayerController = Cast&lt;APlayerController&gt;(GetController())) &#123;  if (UEnhancedInputLocalPlayerSubsystem* Subsystem = ULocalPlayer::GetSubsystem&lt;UEnhancedInputLocalPlayerSubsystem&gt;(PlayerController-&gt;GetLocalPlayer()))  &#123;   Subsystem-&gt;AddMappingContext(InputMapping, 0);  &#125; &#125; // Set up action bindings if (UEnhancedInputComponent* EnhancedInputComponent = Cast&lt;UEnhancedInputComponent&gt;(PlayerInputComponent)) &#123;  // Jumping  //EnhancedInputComponent-&gt;BindAction(IA_Jump, ETriggerEvent::Started, this, &amp;AMyCharacter::Jump);  //EnhancedInputComponent-&gt;BindAction(IA_Jump, ETriggerEvent::Completed, this, &amp;AMyCharacter::StopJumping);  // Moving  EnhancedInputComponent-&gt;BindAction(IA_Move, ETriggerEvent::Triggered, this, &amp;AMyCharacter::Move);  //ETriggerEvent::Triggered 持续触发 Started 单次触发  // Looking  EnhancedInputComponent-&gt;BindAction(IA_Look, ETriggerEvent::Triggered, this, &amp;AMyCharacter::Look); &#125; else &#123;  //错误日志  //UE_LOG(LogTemplateCharacter, Error, TEXT(&quot;&#x27;%s&#x27; Failed to find an Enhanced Input component! This template is built to use the Enhanced Input system. If you intend to use the legacy system, then you will need to update this C++ file.&quot;), *GetNameSafe(this)); &#125;&#125;\n\n最后在角色蓝图中绑定IA_Look.\n视角限制在cpp,beginplay中设置.通过方法ViewPitchMax&#x2F;Min.\n//设置俯仰视角范围APlayerController* PlayerControl = Cast&lt;APlayerController&gt;(Controller);PlayerControl-&gt;PlayerCameraManager-&gt;ViewPitchMax = 45.0f;PlayerControl-&gt;PlayerCameraManager-&gt;ViewPitchMin = -45.0f;\n\n角色跳跃.h\n//角色跳跃UPROPERTY(EditAnywhere, BlueprintReadOnly, meta = (AllowPrivateAccess = &quot;true&quot;), Category = Input)class UInputAction* IA_Jump;\n\n修改增强输入绑定.cpp\n// Called to bind functionality to input// 增强输入的绑定void AMyCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)&#123; Super::SetupPlayerInputComponent(PlayerInputComponent); // Add Input Mapping Context if (APlayerController* PlayerController = Cast&lt;APlayerController&gt;(GetController())) &#123;  if (UEnhancedInputLocalPlayerSubsystem* Subsystem = ULocalPlayer::GetSubsystem&lt;UEnhancedInputLocalPlayerSubsystem&gt;(PlayerController-&gt;GetLocalPlayer()))  &#123;   Subsystem-&gt;AddMappingContext(InputMapping, 0);  &#125; &#125; // Set up action bindings if (UEnhancedInputComponent* EnhancedInputComponent = Cast&lt;UEnhancedInputComponent&gt;(PlayerInputComponent)) &#123;  // Jumping  EnhancedInputComponent-&gt;BindAction(IA_Jump, ETriggerEvent::Started, this, &amp;AMyCharacter::Jump);  EnhancedInputComponent-&gt;BindAction(IA_Jump, ETriggerEvent::Completed, this, &amp;AMyCharacter::StopJumping);  // Moving  EnhancedInputComponent-&gt;BindAction(IA_Move, ETriggerEvent::Triggered, this, &amp;AMyCharacter::Move);  //ETriggerEvent::Triggered 持续触发 Started 单次触发  // Looking  EnhancedInputComponent-&gt;BindAction(IA_Look, ETriggerEvent::Triggered, this, &amp;AMyCharacter::Look); &#125; else &#123;  //错误日志  //UE_LOG(LogTemplateCharacter, Error, TEXT(&quot;&#x27;%s&#x27; Failed to find an Enhanced Input component! This template is built to use the Enhanced Input system. If you intend to use the legacy system, then you will need to update this C++ file.&quot;), *GetNameSafe(this)); &#125;&#125;\n\n这里直接用了引擎自带的封装好的jump函数，没有覆写。\n限制跳跃高度.hMyCaracter\n// 设置跳跃速度GetCharacterMovement()-&gt;JumpZVelocity = 300.f;\n\n最后在角色蓝图中设置IA_Jump就ok了。\n设置2DFlipbook在.build.cs文件中插入PaperZD插件，我用了Resharper直接生成，应该有别的更改。会生成一个PaperZDCharacter.h文件。\nPrivateDependencyModuleNames.AddRange(new string[] &#123; &quot;Paper2D&quot; &#125;);\n\n这样就能使用sprite和flipbook了。\n在.h文件里\n//精灵UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Character, meta = (AllowPrivateAccess = &quot;true&quot;))class UPaperFlipbookComponent* P_Flipbook;\n\n在cpp文件里\nP_Flipbook = CreateDefaultSubobject&lt;UPaperFlipbookComponent&gt;(TEXT(&quot;P_Flipbook&quot;));\n\n默认生成在胶囊体的子组件，如果不是，重新在头文件里声明一个胶囊体，再用SetUpAttachment()函数解决。\n","categories":["log"],"tags":["Unreal Engine","C++","note","Unreal Engine C++","log"]},{"title":"Hello World","url":"/2024/07/24/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"多模态融合学习","url":"/2024/07/25/%E5%A4%9A%E6%A8%A1%E6%80%81%E8%9E%8D%E5%90%88%E5%AD%A6%E4%B9%A0/","content":"前言该项目由cowhorse主要负责，我主要起一个蹭的作用，跟着学习学习哈哈。\n问题介绍在多模态学习领域，如何通过图像生成文本，进而进行自然语言处理（生成故事）以及语音合成。作者对此颇感兴趣。本项目旨在通过上传图片，利用预训练的模型自动生成文本描述，再进一步扩展为故事，最后通过语音技术进行中文朗读。\n相关工作图像描述生成利用OpenAI 的 CLIP（暂定） 和 Hugging Face 的 BLIP 模型进行图像描述生成\n文本生成通过调用现成的LLM，对短文本进行拓展。\n中文翻译与语音合成当前主流的翻译与语音合成技术（MarianMT、百度 TTS 等），利用他们或者尝试hugging face 的模型进行合成\n关键算法利用CNN对图像的特征进行提取，图像描述方面使用RNN（或者transformer架构）。对于文本语言生成，将使用大语言模型，比如GPT（使用transformer架构）或者国内一些较好的预训练文本模型。文本转语音：hugging face的transformer里面有一个包pipeline就承担了分词器的作用，通过分词以及对标点符号进行处理，以tacotron生成。最后用声码器处理。\n改进技术路线多模态生成的优化在预训练模型的基础上，微调模型，使生成的描述和故事更加贴合图片内容。\n多模态各个模块的结合计划使用Langchain将图像描述生成、文本扩展与语音合成多任务流程打通，确保各模块高效协作。实现多轮交互，提高生成内容的丰富性与灵活性。\n用户友好页面制作用户不需要看懂代码，也不需要面对黑漆漆的终端，计划基于Streamlit设计一个UI界面，可以直接对需要识别的图片进行拖动。\n实验设计实验数据使用 Hugging Face 的模型进行实验，选择多种类型的图片作为输入测试集。\n实验流程图片描述生成实验：测试图像到文本的生成效果。\n故事生成实验基于描述生成完整故事，并分析生成内容的流畅度与合理性。\n翻译实验测试英文故事翻译成中文的准确性。\n语音合成实验对中文文本进行语音合成，分析语音输出的流畅度和自然性。\n评估指标图像描述生成的准确性使用 BLEU 评分评价描述生成效果。\n故事生成的质量通过人工评价故事的连贯性和创造性。\n翻译准确度用 BLEU 分数评价英文到中文的翻译效果。\n语音合成质量通过主观评分系统评估语音的自然度。\n","categories":["code"],"tags":["python","AI","Multimodal"]},{"title":"小刻横板卷轴格斗游戏","url":"/2024/07/28/%E5%B0%8F%E5%88%BB%E6%A8%AA%E6%9D%BF%E5%8D%B7%E8%BD%B4%E6%A0%BC%E6%96%97%E6%B8%B8%E6%88%8F/","content":"\n\n前言这是我大一课余自学UE5制作的一个简陋的纯蓝图小游戏，嗣凌sama和the RUN帮忙绘制了大部分敌人的动作\n如果你想体验游戏，你可以从这个链接获取\n链接：百度网盘提取码：0eqd\n我们的所有自制素材也可以通过以下链接获取！\n链接：百度网盘提取码：s3bf\n项目的github地址：Ceobe2d\n感谢支持！\n^ ^\n预览大一课余自制的明日方舟小游戏\n \n","categories":["gameproject"],"tags":["Unreal Engine","game","Arknights","fan game","curriculum design","Unreal Engine Blueprint"]},{"title":"音响/音乐小夜灯","url":"/2024/07/28/%E9%9F%B3%E5%93%8D-%E9%9F%B3%E4%B9%90%E5%B0%8F%E5%A4%9C%E7%81%AF/","content":"前言这是我们在大一学业空闲时间的小作品，一个印象+一个小夜灯，目前都已投入使用^ ^参与这个作品的两位嗣凌sama和the RUN我们参考了zutterhao的开源代码https://www.cnblogs.com/zutterhao/p/10140172.html以下是我们的库音乐小夜灯你也可以通过在终端运行以下代码下载\ngit clone git@gitee.com:Siling402/light.gitgit clone https://gitee.com/Siling402/light.git ##任选一行执行\n\n由于我们是第一次制作花费了很多耗材 &gt; &lt; 如果你要复刻记得多买点材料！！\n耗材奥松机器人声音传感器\ncc2541蓝牙模块板4.0\nArduino UNO\nWS2812B\n等，详细材料前面的两个参考链接里有。\n音响展示视频：音响视频\n\n\n小夜灯展示视频：小夜灯视频\n\n\n\n","categories":["craft"],"tags":["arduino","curriculum design","MCU","craft"]},{"title":"长沙旅行日志-24/8/9","url":"/2024/08/09/%E9%95%BF%E6%B2%99%E6%97%85%E8%A1%8C%E6%97%A5%E5%BF%97-24-8-9/","content":"\n\n\n长沙地质博物馆\n长沙省博物馆\n湘江夜景\n毛泽东青年\n\n\n李自建美术馆\n\n\n\n\n文和友\n\n\n\n\n","categories":["life"],"tags":["life","travel"]},{"title":"明日方舟Wiki数据爬取","url":"/2024/07/25/%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9FWiki%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/","content":"前言Wiki百科是动态网页，我们爬取的方法是从网页获取url再在谷歌重新打开。详细参考python爬虫实战 scrapy+selenium爬取动态网页代码源文件以及成果展示arknights_wiki或者\ngh repo clone muqiuwu/arknights_wiki\n\n如果要运行爬虫，请在项目地址运行以下代码\nscrapy crawl quotes -O quotes.json   #运行指令\n\n以下是部分代码，不是复现，仅提供思路。\n数据爬取蜘蛛头文件import scrapyfrom douban.items import DoubanItemfrom bs4 import BeautifulSoupimport pandas as pdimport matplotlib.pyplot as plt###头文件plt.rcParams[&#x27;font.sans-serif&#x27;] = &#x27;SimSun&#x27;plt.rcParams[&#x27;axes.unicode_minus&#x27;] = Falseganyuan = pd.read_excel(&#x27;干员总览.xlsx&#x27;, sheet_name=&#x27;Sheet1&#x27;)###设置中文格式\n\n干员爬取如果我们要爬取干员，有两个方法，第一种是直接在维基干员首页爬取干员信息。但这样有个问题，就是只能爬取前五十个，我的解决方法是爬取先锋干员,以此类推。\nallowed_domains = [&#x27;prts.wiki/&#x27;]start_urls = [&#x27;https://prts.wiki/w/%E5%B9%B2%E5%91%98%E4%B8%80%E8%A7%88#&#x27;]# allowed_domains = [&#x27;space.bilibili.com&#x27;] # start_urls = [&#x27;https://space.bilibili.com/1629347259/video&#x27;] # page = 10 # 如果想要爬取多页数据，需要定义爬取初始的页数，这里是10# 后续页数的网址，需要自己观察翻页后网址的变化得出规律# base_url = &#x27;https://space.bilibili.com/1629347259/video?tid=0&amp;page=&#123;&#125;&#x27;\n\n这里wiki里每一格是一个干员，我们可以写一个循环，方便爬取\n# index    //*[@id=&quot;filter-result&quot;]/div[1]# name     //*[@id=&quot;filter-result&quot;]/div[1]/div[2]/div/div[1]# cname    //*[@id=&quot;filter-result&quot;]/div[1]/div[2]/div/a/div# cname    //*[@id=&quot;filter-result&quot;]/div[1]/div[2]/div/a/div# hp       //*[@id=&quot;filter-result&quot;]/div[1]/div[4]/div[1]# atk      //*[@id=&quot;filter-result&quot;]/div[1]/div[4]/div[2]# re_ploy  //*[@id=&quot;filter-result&quot;]/div[1]/div[5]/div[1]# code     //*[@id=&quot;filter-result&quot;]/div[1]/div[2]/div/div[3]# 检查网页，得到这些信息的路径    def parse(self, response):        ###### 下面是自己对html数据的处理逻辑                movie_list = response.xpath(&quot;//*[@id=\\&quot;filter-result\\&quot;]/div&quot;)        if movie_list and len(movie_list) &gt; 0:            for movie in movie_list:                item = DoubanItem()                item[&#x27;cname&#x27;] = movie.xpath(&quot;normalize-space(./div[2]/div/a/div/text())&quot;).get()                item[&#x27;ename&#x27;] = movie.xpath(&quot;normalize-space(./div[2]/div/div[1]/text())&quot;).extract()[0]                item[&#x27;jname&#x27;] = movie.xpath(&quot;normalize-space(./div[2]/div/div[2]/text())&quot;).extract()[0]                item[&#x27;code&#x27;] = movie.xpath(&quot;normalize-space(./div[2]/div/div[3]/text())&quot;).extract()[0]                item[&#x27;sub_occupation&#x27;] = movie.xpath(&quot;normalize-space(./div[3]/div/div[1]/text())&quot;).extract()[0]                item[&#x27;influnce&#x27;] = movie.xpath(&quot;normalize-space(./div[3]/div/div[2]/text())&quot;).extract()[0]                item[&#x27;place_of_birth&#x27;] = movie.xpath(&quot;normalize-space(./div[3]/div/div[3]/text())&quot;).extract()[0]                item[&#x27;race&#x27;] = movie.xpath(&quot;normalize-space(./div[3]/div/div[4]/text())&quot;).extract()[0]                item[&#x27;hp&#x27;] = movie.xpath(&quot;normalize-space(./div[4]/div[1]/text())&quot;).get()                item[&#x27;atk&#x27;] = movie.xpath(&quot;normalize-space(./div[4]/div[2]/text())&quot;).extract()[0]                item[&#x27;defe&#x27;] = movie.xpath(&quot;normalize-space(./div[4]/div[3]/text())&quot;).extract()[0]                item[&#x27;res&#x27;] = movie.xpath(&quot;normalize-space(./div[4]/div[4]/text())&quot;).extract()[0]                item[&#x27;re_deploy&#x27;] = movie.xpath(&quot;normalize-space(./div[5]/div[1]/text())&quot;).extract()[0]                item[&#x27;cost&#x27;] = movie.xpath(&quot;normalize-space(./div[5]/div[2]/text())&quot;).extract()[0]                item[&#x27;block&#x27;] = movie.xpath(&quot;normalize-space(./div[5]/div[3]/text())&quot;).extract()[0]                item[&#x27;interval&#x27;] = movie.xpath(&quot;normalize-space(./div[5]/div[4]/text())&quot;).extract()[0]                item[&#x27;sex&#x27;] = movie.xpath(&quot;normalize-space(./div[6]/div[1]/text())&quot;).extract()[0]                item[&#x27;position&#x27;] = movie.xpath(&quot;normalize-space(./div[6]/div[2]/text())&quot;).extract()[0]                item[&#x27;obtain&#x27;] = [movie.xpath(f&quot;normalize-space(./div[7]/div[&#123;i&#125;]/text())&quot;).get()                                  for i in range(1,5)]                item[&#x27;tag&#x27;] = movie.xpath(&quot;normalize-space(./div[8]/div[1]/text())&quot;).get(),movie.xpath(&quot;normalize-space(./div[8]/div[2]/text())&quot;).extract()[0],movie.xpath(&quot;normalize-space(./div[8]/div[3]/text())&quot;).extract()[0],movie.xpath(&quot;normalize-space(./div[8]/div[4]/text())&quot;).extract()[0]                item[&#x27;feature&#x27;] = movie.xpath(&quot;normalize-space(./div[9]/div/div)&quot;).get()                yield item\n\n藏品爬取和干员爬取相似。\nallowed_domains = [&#x27;prts.wiki/&#x27;]    start_urls = [&#x27;https://prts.wiki/w/%E8%90%A8%E5%8D%A1%E5%85%B9%E7%9A%84%E6%97%A0%E7%BB%88%E5%A5%87%E8%AF%AD/%E6%83%B3%E8%B1%A1%E5%AE%9E%E4%BD%93%E5%9B%BE%E9%89%B4&#x27;]    def parse(self, response):        ###### 下面是自己对html数据的处理逻辑        # index      //*[@id=&quot;mw-content-text&quot;]/div[1]        # number     //*[@id=&quot;mw-content-text&quot;]/div[1]/table[2]/tbody/tr[1]/th[1]        #            //*[@id=&quot;mw-content-text&quot;]/div[1]/table[2]/tbody/tr[1]/th[1]         # name       //*[@id=&quot;mw-content-text&quot;]/div[1]/table[2]/tbody/tr[1]/th[2]        # cost       //*[@id=&quot;mw-content-text&quot;]/div[1]/table[2]/tbody/tr[3]/td[1]/div/span        # feature    //*[@id=&quot;mw-content-text&quot;]/div[1]/table[2]/tbody/tr[3]/td[2]/b        # story      //*[@id=&quot;mw-content-text&quot;]/div[1]/table[2]/tbody/tr[3]/td[2]/i        movie_list = response.xpath(&quot;//*[@id=\\&quot;mw-content-text\\&quot;]/div[1]/table&quot;)        if movie_list and len(movie_list) &gt; 0:            for movie in movie_list:                item = DoubanItem()                item[&#x27;numb&#x27;] = movie.xpath(&quot;normalize-space(./tbody/tr[1]/th[1]/text())&quot;).get()                item[&#x27;name&#x27;] = movie.xpath(&quot;normalize-space(./tbody/tr[1]/th[2]/text())&quot;).extract()[0]                item[&#x27;cost&#x27;] = movie.xpath(&quot;normalize-space(./tbody/tr[3]/td[1]/div/span/text())&quot;).extract()[0]                if item[&#x27;cost&#x27;]:                    item[&#x27;feature&#x27;] = movie.xpath(&quot;normalize-space(./tbody/tr[3]/td[2]/b)&quot;).get()                    item[&#x27;story&#x27;] = movie.xpath(&quot;normalize-space(./tbody/tr[3]/td[2]/i/text())&quot;).extract()[0]                else:                    item[&#x27;feature&#x27;] = movie.xpath(&quot;normalize-space(./tbody/tr[3]/td/b)&quot;).get()                    item[&#x27;story&#x27;] = movie.xpath(&quot;normalize-space(./tbody/tr[3]/td/i/text())&quot;).extract()[0]                    item[&#x27;cost&#x27;] = movie.xpath(&quot;normalize-space(./tbody/tr[4]/td/span)&quot;).get()                # item[&#x27;obtain&#x27;] = [movie.xpath(f&quot;normalize-space(./div[7]/div[&#123;i&#125;]/text())&quot;).get()                #                   for i in range(1,5)]                # item[&#x27;tag&#x27;] = movie.xpath(&quot;normalize-space(./div[8]/div[1]/text())&quot;).get(),movie.xpath(&quot;normalize-space(./div[8]/div[2]/text())&quot;).extract()[0],movie.xpath(&quot;normalize-space(./div[8]/div[3]/text())&quot;).extract()[0],movie.xpath(&quot;normalize-space(./div[8]/div[4]/text())&quot;).extract()[0]                # item[&#x27;feature&#x27;] = movie.xpath(&quot;normalize-space(./div[9]/div/div)&quot;).get()                yield item\n\nitems文件用来接收爬取的信息。只保留需要的，不需要的我一般注释掉。\n# Define here the models for your scraped items## See documentation in:# https://docs.scrapy.org/en/latest/topics/items.htmlimport scrapyclass DoubanItem(scrapy.Item):    # define the fields for your item here like:    # name = scrapy.Field()    # cname = scrapy.Field()    # ename = scrapy.Field()    # jname = scrapy.Field()    # code = scrapy.Field()    # sub_occupation = scrapy.Field()    # influnce = scrapy.Field()    # place_of_birth = scrapy.Field()    # race = scrapy.Field()    # hp = scrapy.Field()    # atk = scrapy.Field()    # defe = scrapy.Field()    # res = scrapy.Field()    # re_deploy = scrapy.Field()    # cost = scrapy.Field()    # block = scrapy.Field()    # interval = scrapy.Field()    # sex = scrapy.Field()    # position = scrapy.Field()    # obtain = scrapy.Field()    # tag = scrapy.Field()    # feature=scrapy.Field()# # 干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取干员爬取    # numb =scrapy.Field()    # name =scrapy.Field()    # cost =scrapy.Field()    # feature =scrapy.Field()    # story =scrapy.Field()    # #藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取藏品爬取    pass\n\n数据整理将json数据转换进excel里\n干员整理import pandas as pdimport jsonfrom pathlib import Pathjson_files = [&quot;C:/Users/86183/Documents/WeChat Files/wxid_ot8jppgzo67v22/FileStorage/File/2024-07/先锋.json&quot;,              &quot;C:/Users/86183/Documents/WeChat Files/wxid_ot8jppgzo67v22/FileStorage/File/2024-07/近卫男.json&quot;,               &quot;C:/Users/86183/Documents/WeChat Files/wxid_ot8jppgzo67v22/FileStorage/File/2024-07/近卫女.json&quot;,               &quot;C:/Users/86183/Documents/WeChat Files/wxid_ot8jppgzo67v22/FileStorage/File/2024-07/狙击.json&quot;,               &quot;C:/Users/86183/Documents/WeChat Files/wxid_ot8jppgzo67v22/FileStorage/File/2024-07/术师.json&quot;,               &quot;C:/Users/86183/Documents/WeChat Files/wxid_ot8jppgzo67v22/FileStorage/File/2024-07/医疗.json&quot;,               &quot;C:/Users/86183/Documents/WeChat Files/wxid_ot8jppgzo67v22/FileStorage/File/2024-07/重装.json&quot;,               &quot;C:/Users/86183/Documents/WeChat Files/wxid_ot8jppgzo67v22/FileStorage/File/2024-07/辅助.json&quot;,               &quot;C:/Users/86183/Documents/WeChat Files/wxid_ot8jppgzo67v22/FileStorage/File/2024-07/特种.json&quot;]all_data=[]for file in json_files:    with open(file, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as f:        data = json.load(f)        all_data.extend(data)  # 将当前 JSON 文件的数据扩展到 all_data 列表中df = pd.DataFrame(all_data)data=df.rename(columns=&#123;    &#x27;cname&#x27;:&#x27;中文名&#x27;,    &#x27;ename&#x27;:&#x27;英文名&#x27;,    &#x27;jname&#x27;:&#x27;日文名&#x27;,    &#x27;code&#x27;:&#x27;编号&#x27;,    &#x27;sub_occupation&#x27;:&#x27;子职业&#x27;,    &#x27;influnce&#x27;:&#x27;归属势力&#x27;,    &#x27;place_of_birth&#x27;:&#x27;出生地&#x27;,    &#x27;race&#x27;:&#x27;种族&#x27;,    &#x27;hp&#x27;:&#x27;血量&#x27;,    &#x27;atk&#x27;:&#x27;攻击&#x27;,    &#x27;defe&#x27;:&#x27;物防&#x27;,    &#x27;res&#x27;:&#x27;法防&#x27;,    &#x27;re_deploy&#x27;:&#x27;再部署时间&#x27;,    &#x27;cost&#x27;:&#x27;费用&#x27;,    &#x27;block&#x27;:&#x27;阻挡数&#x27;,    &#x27;interval&#x27;:&#x27;攻速&#x27;,    &#x27;sex&#x27;:&#x27;性别&#x27;,    &#x27;position&#x27;:&#x27;定位&#x27;,    &#x27;obtain&#x27;:&#x27;获取方式&#x27;,    &#x27;tag&#x27;:&#x27;标签&#x27;,    &#x27;feature&#x27;:&#x27;特性&#x27;    &#125;)data.to_excel(&#x27;干员总览.xlsx&#x27;, index=False)  # 如果不需要保存索引列，可以设置index参数为False\n\n藏品整理import pandas as pdimport jsonfrom pathlib import Pathjson_files = [&quot;C:/Users/86180/OneDrive/桌面/python/douban/quotes.json&quot;]all_data=[]for file in json_files:    with open(file, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as f:        data = json.load(f)        all_data.extend(data)  # 将当前 JSON 文件的数据扩展到 all_data 列表中df = pd.DataFrame(all_data)data=df.rename(columns=&#123;    &#x27;numb&#x27;:&#x27;编号&#x27;,    &#x27;name&#x27;:&#x27;名字&#x27;,    &#x27;cost&#x27;:&#x27;获取&#x27;,    &#x27;feature&#x27;:&#x27;效果&#x27;,    &#x27;story&#x27;:&#x27;故事&#x27;    &#125;)data.to_excel(&#x27;萨卡兹的无终奇语想象实体图鉴.xlsx&#x27;, index=False)  # 如果不需要保存索引列，可以设置index参数为False\n\n数据分析饼状图df=pd.read_excel(&quot;C:/Users/86183/Desktop/总览/json to csv or excel/干员总览.xlsx&quot;,sheet_name=&#x27;Sheet1&#x27;)# 查看读取的数据df.head()# 打印前几行数据\n\npower_count = df[&#x27;所属势力&#x27;].value_counts().reset_index()#df中所属势力下的所有值数个数排成dataframe，重新设置index# print(power_count)temp = 10  # 设定频数界限than_ten = power_count[power_count[&#x27;count&#x27;] &gt;= temp].copy()lower_than_ten_sum = power_count[power_count[&#x27;count&#x27;] &lt; temp][&#x27;count&#x27;].sum()# 将小于频数界限的数据合并到一个 &#x27;其他&#x27; 类别other_row = pd.DataFrame([&#123;&#x27;所属势力&#x27;: &#x27;其他&#x27;, &#x27;count&#x27;: lower_than_ten_sum&#125;])result=pd.concat([than_ten,other_row])# 可选的饼图配置explode = [0.02] * len(result)  # 各个分块的间距colors = [&#x27;lavender&#x27;, &#x27;g&#x27;, &#x27;r&#x27;, &#x27;c&#x27;, &#x27;m&#x27;, &#x27;y&#x27;, &#x27;cyan&#x27;, &#x27;pink&#x27;, &#x27;orange&#x27;, &#x27;grey&#x27;][:len(than_ten)]# 绘制饼图plt.figure(figsize=(20, 20))plt.pie(result[&#x27;count&#x27;], explode=explode, labels=result[&#x27;所属势力&#x27;],        colors=colors, autopct=&#x27;%2.1f%%&#x27;, textprops=&#123;&#x27;fontsize&#x27;: 24&#125;)plt.title(&#x27;干员所属势力分布饼图&#x27;)plt.savefig(&#x27;干员所属势力分布饼图.png&#x27;)plt.show()\n\n直方图# 读取数据df=pd.read_excel(&quot;C:/Users/86180/OneDrive/桌面/python/干员总览.xlsx&quot;,sheet_name=&#x27;Sheet1&#x27;)# 定义一个生成直方图的方法，参数有：‘标题’，标题大小，‘x轴名’，‘y轴名’，x轴旋转，x轴大小，y轴大小def plot_bar_set(title,title_fontsize, xlabel, ylabel, x_rotation=0, x_fontsize=14, y_fontsize=14):    plt.title(title,fontsize=title_fontsize)    plt.xlabel(xlabel)    plt.ylabel(ylabel)    plt.xticks(rotation=x_rotation, fontsize=x_fontsize)    plt.yticks(fontsize=y_fontsize)# 查看读取的数据df.head()# 打印前几行数据\n\n# 使用df[&#x27;子职业&#x27;].value_counts()统计了DataFrame df中&#x27;子职业&#x27;列的每个唯一值的出现次数，并将结果存储在grouped变量中。grouped = df[&#x27;子职业&#x27;].value_counts().reset_index()# 绘制了柱状图，x轴为&#x27;子职业&#x27;，y轴为&#x27;count&#x27;，数据源为groupedplt.figure(figsize=(120,40))# 绘制了柱状图，x轴为&#x27;子职业&#x27;，y轴为&#x27;count&#x27;，数据源为groupedplt.bar(&#x27;子职业&#x27;,&#x27;count&#x27;,data=grouped,width=0.7)plot_bar_set(&#x27;干员子职业分布统计&#x27;,150,&#x27;子职业&#x27;,&#x27;个数&#x27;,45,64,64)# 保存plt.savefig(&#x27;干员子职业总览.png&#x27;)\n\n散点图#  提取攻击和血量数据attack = df[&#x27;攻击&#x27;]hp = df[&#x27;血量&#x27;]#  绘制散点图plt.figure(figsize=(10, 6))  # 设置图的大小plt.scatter(hp,attack, marker=&#x27;o&#x27;, color=&#x27;blue&#x27;, alpha=0.5)  # 绘制散点图plt.title(&#x27;干员攻击与血量散点图&#x27;)  # 设置图的标题plt.xlabel(&#x27;血量&#x27;)  # 设置 x 轴标签plt.ylabel(&#x27;攻击&#x27;)  # 设置 y 轴标签plt.grid(True)  # 添加网格线plt.tight_layout()  # 调整布局，防止标签被切割plt.savefig(&#x27;干员攻击与血量散点图.png&#x27;)plt.show()  # 显示图形\n\n子职业相关这里比较多我们只展示其中之一————DPS\nimport pandas as pdimport openpyxlimport matplotlib.pyplot as plt# 设置中文及字符显示plt.rcParams[&#x27;font.sans-serif&#x27;] = &#x27;SimSun&#x27;plt.rcParams[&#x27;axes.unicode_minus&#x27;] = Falsedf = pd.read_excel(&#x27;干员总览.xlsx&#x27;, sheet_name=&#x27;Sheet1&#x27;)df.head()df[&#x27;攻速&#x27;] = df[&#x27;攻速&#x27;].str.replace(&#x27;s&#x27;, &#x27;&#x27;).astype(float)df[&#x27;普攻DPS&#x27;] = df[&#x27;攻击&#x27;] / df[&#x27;攻速&#x27;]df_sorted = df.sort_values(by=&#x27;子职业&#x27;)average_dps = (df_sorted.groupby(&#x27;子职业&#x27;)[&#x27;普攻DPS&#x27;].mean().reset_index())average_dps = average_dps.sort_values(by=&#x27;普攻DPS&#x27;)output_file = &#x27;干员普攻DPS统计.xlsx&#x27;with pd.ExcelWriter(output_file, engine=&#x27;openpyxl&#x27;) as writer:    average_dps.to_excel(writer, sheet_name=&#x27;普攻DPS统计&#x27;, index=False)plt.figure(figsize=(80, 40))plt.bar(average_dps[&#x27;子职业&#x27;], average_dps[&#x27;普攻DPS&#x27;], color=&#x27;skyblue&#x27;)plt.xticks(fontsize=60)plt.yticks(fontsize=60)plt.xlabel(&#x27;子职业&#x27;,fontsize=60)plt.ylabel(&#x27;平均普攻DPS&#x27;,fontsize=60)plt.title(&#x27;不同子职业的平均普攻DPS&#x27;,fontsize=60)plt.xticks(rotation=45)plt.tight_layout()plt.savefig(&#x27;平均普攻DPS柱状图.png&#x27;)plt.show()\n\n部分成果\n改进我们发现Wiki角色的详细界面的格式均为https://prts.wiki/w/nymph我们可以通过爬取的信息重写一个爬虫，循环爬取所有的角色详情页面。\n","categories":["code"],"tags":["python","game","Arknights","crawler"]},{"title":"2024三教杯x腾讯极限开发大赛《喵力循环》","url":"/2024/11/05/2024%E4%B8%89%E6%95%99%E6%9D%AFx%E8%85%BE%E8%AE%AF%E6%9E%81%E9%99%90%E5%BC%80%E5%8F%91%E5%A4%A7%E8%B5%9B%E3%80%8A%E5%96%B5%E5%8A%9B%E5%BE%AA%E7%8E%AF%E3%80%8B/","content":"\n\n\n前言大量猫猫闯入GameJam！登峰造极？还是一事无成？无名小卒？或者名扬天下？匹配卡牌，完成任务！循环牌库，绝不鬼抽！是快刀斩乱麻，还是养精蓄锐、以待明日？程策美音，全都交给你指挥！调兵遣将，一切由你来决定！当然是《喵力循环》了！快来下载吧！以下是我们demo的下载链接：\n网盘链接提取码: xh9d\n视频\n\n友链很高兴能和大家一起参与此次开发，是一段很美好的开发时光。大家都很努力，能遇到大家很幸运。我在该项目中主要负责的策划和UI部分美术，以下是我们小伙伴的链接：\n音乐，文案：祈澄溪美术：小Y策划，程序：GaniHung程序：忽冷忽热的风这是配音老师的链接：银河落幕时\n感谢大家的支持！^ ^\n","categories":["gameproject"],"tags":["game","Unity","GameJam"]},{"title":"UE5实用插件","url":"/2024/11/11/UE5%E5%AE%9E%E7%94%A8%E6%8F%92%E4%BB%B6/","content":"前言总结了几款我常用ue5插件，平常自己用起来方便，不建议安装太多插件容易报错。在开始下载插件之前，在EPIC&#x2F;虚幻引擎&#x2F;库，翻到最下面，点fab libary旁边的刷新按钮，然后把Fab UE Pludin安装到你的引擎里，之后在引擎里安装插件（由于现在虚幻引擎商店已经整合在fab里，在EPIC上面已经下不了了）或者每次在网页版fab上入库插件后，点fab libary旁边的刷新按钮，再安装在引擎里。\nElectronic Nodes（收费）Electronic Nodes是一款美化插件，主要美化的你的蓝图连线，可以把之前UE的曲线连线变成直线，看起来更舒服，小贵，但值得。\nActor LockerActor Locker可以给你的actor上锁，这样在你编辑视图是就不会误触，或者在批量编辑时固定，方便快捷。\nAuto Size CommentsAuto Size Comments是一款批注功能美化插件，可以让你的批注拥有自适应大小、移入移出、改色、空标注、批量编辑等功能。\nFlat NodesFlat Nodes是一款蓝图美化插件，它会使你的蓝图扁平化，去除UE蓝图块的圆角和渐变，使你的蓝图界面看起来更简洁。\nPaperZDPaperZD是一款2d帧动画插件，引入了状态机等方便2d游戏开发的功能，功能强大用起来和UE动画蓝图类似，无论蓝图C++都很好用，是开发2d类型游戏必备的插件。\nNODY Entity PerceptionNODY Entity Perception是一款AI感知插件，用来平替UE引擎自带的视觉感知时比较好用，debug方便，数据修改方便。\nScreen FadeScreen Fade是一款视图渐变插件，可以快速使用用来作整个视角的渐显渐隐，同时可以配合背景音乐使用。\nProjectCleanerProjectCleaner是一款项目瘦身插件，它可以检索你没有用到的文件和空文件夹，并一键删除，在迁移项目、项目瘦身等方面使用反馈优秀。\nDaySequence（UE5.5）DaySequence是一款时间系统插件，可以用在项目里调节不同时间段的光照，该插件日前仅在5.5中beta使用。\nAdvanced Fade Objects （free&amp;pro）Advanced Fade Objects是一款经典的透视插件，用作将挡在你和你的摄像机之间的物体透明化。在rpg游戏中广泛使用。\nCosmos Rocket Plugin (Drag and Drop, Free Plugin )Rocket是一款3d素材插件，经常会有免费主题供你下载，一个主题的素材内容很多，建议时不时备份以便之后使用。这款插件支持多种引擎和建模软件。\nPhysical Layout ToolPhysical Layout Tool是一款3d模快速摆放插件，当你需要摆放多个小物体，并让他们互相堆叠合理，这款插件可以让你在导入模型是就让模型具有物理碰撞。\nActor PaletteActor Palette是系统自带的插件，用作将模型快速拖入视图中。\nkitbash3d Cargokitbash3d Cargo是一款3d素材插件，素材很多很全，也有免费素材，需要在外部下载Cargo软件，这款插件支持多种引擎和建模软件。\n总结基本上就是这些常用插件啦，之后有时间我还会学习尝试一些更专项的插件如avg视图插件等。\n","categories":["note"],"tags":["note","Unreal Engine，pludin"]},{"title":"Tensorflow2.7安装教程","url":"/2024/11/12/Tensorflow2-7%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/","content":"前言我安装的配置是win11，python3.9。照着我这个步骤什么都不改一步一步是可以安装下来2.7的。参考了以下几位大佬教程。Tensorflow-gpu保姆级安装教程（Win11, Anaconda3，Python3.9）TensorFlow安装CPU版本和GPU版本tensorflow-gpu无法调用GPU； Cannot dlopen some GPU libraries. Could not load dynamic library ‘libcusolverAnaconda安装-超详细版(2023)超详细彻底卸载Anaconda教程tensorflow-gpu卸载 （windows）\n准备工作在安装之前，先查询自己电脑的环境配置，然后查询Tensorflow-gpu、Python、 cuda 、 cuDNN 版本关系，安装时要一一对应。Tensorflow-gpu 与 Python、 cuda、cuDNN 版本关系查询链接我安装的是GPU2.7.0版本，python是3.9版本。我的安装环境为：win11 NVIDIA GeForce RTX40060 3.9.20我的tensorflow-gpu安装版本为：tensorflow-gpu 2.7.0   cuda 11.5.2   cuDNN 8.3.2我这个对应关系是在网上查询别人安装成功的案例，不要自己随意组合，不然很容易安装失败，或者就按官网查询的组合安装，安装过程是一样的！\n查看电脑显卡右键此电脑→右键选管理→设备管理器→显示适配器\n\n看到NVDIA···就是你的显卡型号。如果没有则说明你的电脑没有独显，这时就只能安装CPU版本的，我这次只演示GPU版本的安装。\n根据你的显卡型号去NIVIA官网查询你的显卡算力，建议算力&gt;&#x3D;3.5安装（基本上这几年的N卡都可以）。\n右键显卡→属性→驱动程序，可以查看显卡的驱动程序：\n查看GPU驱动版本，也就是我们“CUDA Version”，Windows 11 版本中一般是12.0版本，键盘上同时按win +r，输入cmd，打开命令窗口，在命令窗口输入：\n\nnvidia-smi\n\n\nAnaconda安装Anaconda的安装分两种情况：\n情况一：电脑现在没有装python或者现在装的可以卸载掉（装Anaconda时先卸python）\n情况二： 电脑目前装了python，但想保留它 (比较复杂，请参考网上其他教程 !)\n彻底卸载python首先利用 电脑管家自带的卸载工具将python卸载，并且手动删除安装目录中的文件（这部分十分简单就不详细介绍了），接下来删除环境变量：\n\n计算机（右键）→属性→高级系统设置→（点击）环境变量。\n查看用户自己设置的环境变量，也就是上面那一栏，找到path，双击path后面的值，进入查看自己设置过的环境变量。\n将安装python的变量全部删除，再确定 （如果卸载完python的时候环境变量自动删掉了就不用管！）。\n在退出时，不要忘记外面还有几个确认按钮，也需要点击，不要直接叉掉，否则并没有保存设置。到这就彻底删除完python啦（如果有geek可以用geek彻底删除一下python）。\n\nAnaconda下载在Anaconda安装的过程中，比较容易出错的环节是环境变量的配置，所以大家在配置环境变量的时候，要细心一些。\n下载安装包方法一：（推荐）Anaconda官网直接点击”Download”即可。（必须要是Windows环境且是64位）方法二：清华镜像下载windows版本即可。\n安装安装时安装路径一定不要选在C盘！安装时安装路径一定不要选在C盘！安装时安装路径一定不要选在C盘！advinced installation option不要选择add Anaconda···即可,这个是添加变量，我们后期手动添加变量。然后一顿点点点，等待它安装好，安装好后我们需要手动配置环境变量。\n配置环境变量计算机（右键）→属性→高级系统设置→（点击）环境变量。在下面系统变量里，找到并点击Path。在编辑环境变量里，点击新建。输入下面的五个环境变量。（这里不是完全一样的！你需要将以下五条环境变量中涉及的到的”D:\\anaconda”都修改为你的Anaconda的安装路径）\nD:\\anacondaD:\\anaconda\\ScriptsD:\\anaconda\\Library\\binD:\\anaconda\\Library\\mingw-w64\\binD:\\anaconda\\Library\\usr\\bin\n\n简要说明五条路径的用途：这五个环境变量中，1是Python需要，2是conda自带脚本，3是jupyter notebook动态库, 4是使用C with python的时候.新建完成后点击确定!\n检验安装是否成功同时按 win + r ，输入cmd，在弹出的命令行查看anaconda版本，输入 ：\nconda --version\n\n和：\npython\n\n若出现版本号，即代表配置成功!在电脑屏幕左下角的Windows徽标键这里，选择点击绿色圈圈Anaconda Navifator将其打开。出现此界面即为安装成功：到这里，基本的安装和设置就好啦！\n更改conda源（后续安装第三方库可以加快速度）使用\nconda install 包名\n\n安装需要的Python包非常方便，但是官方服务器在国外，下载龟速，国内清华大学提供了Anaconda的镜像仓库，我们把源改为 清华大学镜像源。\n在Anaconda prompt中操作：\n在命令行输入以下命令，即可\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forgeconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/ //设置搜索时显示通道地址conda config --set show_channel_urls yes\n\n查看是否修改好通道：\nconda config --show channels\n\n\n以下是其他一些操作\n#恢复默认源conda config --remove-key channels#删除旧镜像源conda config --remove channels https://mirrors.tuna.tsinghua.edu.cn/tensorflow/linux/cpu/#添加新镜像源conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/tensorflow/linux/cpu/\n\n超详细彻底卸载Anaconda教程\ntensorflow安装下载cuda和cuDNN。在官网上下载对应的cuda和cuDNN，版本可以低于上面查到的CUDA版本但不能高于电脑支持的版本。\ncuda下载地址：CUDA Toolkit Archive | NVIDIA Developer；cudnn下载地址：cuDNN Archive | NVIDIA Developer。\nCUDA安装\n下载：我我下载的是CUDA Toolkit 11.5.2cuda下载地址：CUDA Toolkit Archive | NVIDIA Developer点击前面的CUDA Toolkit 11.5.2。选择相应的系统、版本等选项，点击Download下载：windowsx86_6411exe(local)\n\n安装：a. 双击安装包，此时会出现一个提示框，让你选择临时解压位置（该位置的内容在你安装完cuda之后会自动删除），这里默认即可，点击ok。b.点击同意并继续：c.完成上一步后，选择自定义，然后点下一步：d.完成上一步，这里CUDA一定要勾选上，下面的可选可不选，对后续没有影响。在组件CUDA一栏中，取消勾选Visual Studio Integration（因为我们并没有使用Visual Stduio环境，即使勾选上了也会安装失败）在Driver components一栏比较Display Driver的新版本和当前版本的信息。若当前版本高于新版本，则取消勾选Display Driver；若当前版本低于新版本，则保留默认安装信息即可，否则电脑会死机或者卡顿，甚至可能蓝屏。！！！source&#x2F;images&#x2F;tensorflow0&#x2F;1731465591059.pnge.这个安装位置可以自己改。要截图记录一下你装到哪里了，后面要用到！我选择了默认安装位置,这样找起来方便。f、等待安装成功，点击关闭即可。\n\n检查环境变量完成安装后，检查一下环境变量是否存在，一般安装完成会自动配置好环境变量，若是没有，则需手动配置，具体过程如下。\n\n\na.打开 电脑&#x2F;属性&#x2F;高级系统设置&#x2F;环境变量。\nb.查看是否有以下系统变量，没有则需要自行添加，对应图片上的名称和值，配置你电脑CUDA安装所在的位置。\nc.打开系统变量的Path，查看是否有一下两条内容，若没有则需自行添加，一定要配置对安装的位置。配置好环境变量后，我们检查下CUDA是否安装成功。4. 打开cmd，输入以下命令查看CUDA是否安装成功（二选一）如果不能显示以下信息，则说明安装失败。\nnvcc -Vnvcc --version\n\n还可以查看CUDA 设置的环境变量。\nset cuda\n\n我们还可以搜索CUDA 的安装目录，找到“nvcc.exe”文件。CUDA的安装就结束了，接下来下载解压cuDNN文件。\ncudnn安装CUDA并不是实现GPU的神经网络加速库，如果希望针对的是神经网络进行加速，我们还需要安装cuDNN神经网络加速库。\ncuDNN并非是应用程序，而是几个文件包，下载后把它复制到CUDA 的目录下即可。下载地址：cuDNN Archive | NVIDIA Developer。第一次单击下载时，会让你先注册登录，然后再进行下载，注册过程认真填写内容就没问题，此处略过，接下来进入下载环节。\n\n下载下载对应版本的cuDNN。我选择的是cuDNN v8.3.2 for CUDA 11.5。\n下载解压好安装包后，我们解压可以看到有四个文件：\n注意！！！要将cudnn文件中的对应文件夹下的所有文件复制 到对应的安装目录中，而 不是 把cudnn文件中的文件夹复制过去。eg：复制的不是cudnn中的bin文件夹，而是bin文件夹下的所有文件。（有重复的文件是正常的，覆盖掉就好！）打开cudnn文件中的bin文件夹，将该文件夹中所有的 文件 复制粘贴 到CUDA\\v11.5\\bin文件夹中。打开cudnn文件中的include文件夹，将该文件夹中所有的 文件 复制粘贴 到CUDA\\v11.5\\include文件夹中。打开cudnn文件中的lib文件夹，将该文件夹中所有的 文件 复制粘贴 到CUDA\\v11.5\\lib\\x64文件夹中。打开cudnn文件中的剩下的文件， 复制粘贴 到CUDA\\v11.5文件夹中。cuDNN其实就是CUDA的一个补丁而已，专为深度学习运算进行优化的，然后我们再添加环境变量！继续往下走。\n\n环境变量\n打开系统变量的Path，在系统变量的path路径下添加以下路径：（具体要根据自己的安装路径下做调整）\n\nC:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\binC:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\libnvvpC:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\lib\\x64\n\n因为我是默认路径，如果是下载在默认路径直接复制即可。2. 配置好环境后，我们需要验证环境变量是否配置成功：打开cmd，进入自己CUDA的安装下路径…\\CUDA\\v11.5\\extras\\demo_suite：,我是默认路径，所以我的是：\ncd \\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\extras\\demo_suite\n\n然后分别执行以下两个命令：\n.\\bandwidthTest.exe.\\deviceQuery.exe\n\n两个都显示result&#x3D;pass则为成功！3. 都安装好之后，我们可以继续输入nvidia-smi查看CUDA的信息，然后根据安装版本的信息再去实现其他的库（环境）安装和使用！\nnvidia-smi\n\n\n如图所示，可以看到驱动的版本是560.94；最高支持的CUDA版本是12.6版本。\n创建 tensorflow 环境我这里是使用Anaconda（如果选择这一步，就不需要额外下载python，以及各种常用工具包，它会打包下载好）\n\n打开anaconda prompt\n\n创建tensorflow环境，在base环境输入命令：conda create -n tensorflow python&#x3D;3.9，表示创建一个名字为tensorflow的环境，这个环境用的python版本是3.9版本的，如果默认创建，会在C盘！\n\n\nconda create -n tensorflow python=3.9\n\nw11下载anaconda在d盘，新建的虚拟环境总是在c盘怎么解决3. 创建成功后，输入命令：conda env list，可以看到tensorflow环境已经创建，星号为当前所在环境。\nconda env list\n\n（基础环境base）4. 进入环境，输入命令：activate tensorflow，就可以进入tensorflow环境中。\nconda activate tensorflow\n\nconda deactivate\n\n如果要退出环境，输入deactivate。5. 因为我的conda环境在D盘中，所以将路径改了以下。如果anaconda安装的时候是默认路径，这一步不需要。\nd:cd \\WorkSoftware\\Install\\Anaconda3\\envs\\tensorflow\\\n\n6. 安装指定版本的tensorflow-gpu，我安装的是2.7.0，根据你自己的配套版本安装，输入命令：\npip install tensorflow-gpu==2.7.0 -i https://pypi.tuna.tsinghua.edu.cn/simple\n\n无报错结束应该是装好了。7. 验证是否下载成功：打开python环境，导入tensorflow包进行测试 ，查看tensorflow的版本信息, 输入命令：\nimport tensorflow as tf\n\n要是遇到这个问题，提示protobuf版本过低\n(tensorflow2) C:\\Users\\asus&gt;pythonPython 3.9.19 (main, May  6 2024, 20:12:36) [MSC v.1916 64 bit (AMD64)] on win32Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import tensorflow as tfTraceback (most recent call last):  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\__init__.py&quot;, line 41, in &lt;module&gt;    from tensorflow.python.tools import module_util as _module_util  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\__init__.py&quot;, line 41, in &lt;module&gt;    from tensorflow.python.eager import context  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\eager\\context.py&quot;, line 33, in &lt;module&gt;    from tensorflow.core.framework import function_pb2  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\core\\framework\\function_pb2.py&quot;, line 16, in &lt;module&gt;    from tensorflow.core.framework import attr_value_pb2 as tensorflow_dot_core_dot_framework_dot_attr__value__pb2  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\core\\framework\\attr_value_pb2.py&quot;, line 16, in &lt;module&gt;    from tensorflow.core.framework import tensor_pb2 as tensorflow_dot_core_dot_framework_dot_tensor__pb2  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\core\\framework\\tensor_pb2.py&quot;, line 16, in &lt;module&gt;    from tensorflow.core.framework import resource_handle_pb2 as tensorflow_dot_core_dot_framework_dot_resource__handle__pb2  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\core\\framework\\resource_handle_pb2.py&quot;, line 16, in &lt;module&gt;    from tensorflow.core.framework import tensor_shape_pb2 as tensorflow_dot_core_dot_framework_dot_tensor__shape__pb2  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\core\\framework\\tensor_shape_pb2.py&quot;, line 36, in &lt;module&gt;    _descriptor.FieldDescriptor(  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\google\\protobuf\\descriptor.py&quot;, line 553, in __new__    _message.Message._CheckCalledFromGeneratedFile()TypeError: Descriptors cannot be created directly.If this call came from a _pb2.py file, your generated code is out of date and must be regenerated with protoc &gt;= 3.19.0.If you cannot immediately regenerate your protos, some other possible workarounds are: 1. Downgrade the protobuf package to 3.20.x or lower. 2. Set PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python (but this will use pure-Python parsing and will be much slower).More information: https://developers.google.com/protocol-buffers/docs/news/2022-05-06#python-updates&gt;&gt;&gt;\n\n输入exit()退出python环境，回到虚拟环境下载以下包\npip install protobuf==3.19.6 -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host pypi.tuna.tsinghua.edu.cn\n\nsuccessflly installed protobuf-3.19.6即为下载成功\n再次进入python环境，输入“import tensorflow as tf”，要是遇到如下问题，提示TensorFlow与NumPy的版本不兼容\n(tensorflow2) C:\\Users\\asus&gt;pythonPython 3.9.19 (main, May  6 2024, 20:12:36) [MSC v.1916 64 bit (AMD64)] on win32Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import tensorflow as tfA module that was compiled using NumPy 1.x cannot be run inNumPy 2.0.0 as it may crash. To support both 1.x and 2.xversions of NumPy, modules must be compiled with NumPy 2.0.Some module may need to rebuild instead e.g. with &#x27;pybind11&gt;=2.12&#x27;.If you are a user of the module, the easiest solution will be todowngrade to &#x27;numpy&lt;2&#x27; or try to upgrade the affected module.We expect that some modules will need time to support NumPy 2.Traceback (most recent call last):  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\__init__.py&quot;, line 41, in &lt;module&gt;    from tensorflow.python.tools import module_util as _module_util  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\__init__.py&quot;, line 41, in &lt;module&gt;    from tensorflow.python.eager import context  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\eager\\context.py&quot;, line 38, in &lt;module&gt;    from tensorflow.python.client import pywrap_tf_session  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\client\\pywrap_tf_session.py&quot;, line 23, in &lt;module&gt;    from tensorflow.python.client._pywrap_tf_session import *AttributeError: _ARRAY_API not foundA module that was compiled using NumPy 1.x cannot be run inNumPy 2.0.0 as it may crash. To support both 1.x and 2.xversions of NumPy, modules must be compiled with NumPy 2.0.Some module may need to rebuild instead e.g. with &#x27;pybind11&gt;=2.12&#x27;.If you are a user of the module, the easiest solution will be todowngrade to &#x27;numpy&lt;2&#x27; or try to upgrade the affected module.We expect that some modules will need time to support NumPy 2.Traceback (most recent call last):  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\__init__.py&quot;, line 41, in &lt;module&gt;    from tensorflow.python.tools import module_util as _module_util  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\__init__.py&quot;, line 46, in &lt;module&gt;    from tensorflow.python import data  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\data\\__init__.py&quot;, line 25, in &lt;module&gt;    from tensorflow.python.data import experimental  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\data\\experimental\\__init__.py&quot;, line 98, in &lt;module&gt;    from tensorflow.python.data.experimental import service  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\data\\experimental\\service\\__init__.py&quot;, line 374, in &lt;module&gt;    from tensorflow.python.data.experimental.ops.data_service_ops import distribute  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\data\\experimental\\ops\\data_service_ops.py&quot;, line 27, in &lt;module&gt;    from tensorflow.python.data.experimental.ops import compression_ops  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\data\\experimental\\ops\\compression_ops.py&quot;, line 20, in &lt;module&gt;    from tensorflow.python.data.util import structure  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\data\\util\\structure.py&quot;, line 26, in &lt;module&gt;    from tensorflow.python.data.util import nest  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\data\\util\\nest.py&quot;, line 40, in &lt;module&gt;    from tensorflow.python.framework import sparse_tensor as _sparse_tensor  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\framework\\sparse_tensor.py&quot;, line 28, in &lt;module&gt;    from tensorflow.python.framework import constant_op  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\framework\\constant_op.py&quot;, line 29, in &lt;module&gt;    from tensorflow.python.eager import execute  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\eager\\execute.py&quot;, line 27, in &lt;module&gt;    from tensorflow.python.framework import dtypes  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py&quot;, line 30, in &lt;module&gt;    from tensorflow.python.lib.core import _pywrap_bfloat16AttributeError: _ARRAY_API not foundImportError: numpy.core._multiarray_umath failed to importImportError: numpy.core.umath failed to importTraceback (most recent call last):  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\__init__.py&quot;, line 41, in &lt;module&gt;    from tensorflow.python.tools import module_util as _module_util  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\__init__.py&quot;, line 46, in &lt;module&gt;    from tensorflow.python import data  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\data\\__init__.py&quot;, line 25, in &lt;module&gt;    from tensorflow.python.data import experimental  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\data\\experimental\\__init__.py&quot;, line 98, in &lt;module&gt;    from tensorflow.python.data.experimental import service  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\data\\experimental\\service\\__init__.py&quot;, line 374, in &lt;module&gt;    from tensorflow.python.data.experimental.ops.data_service_ops import distribute  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\data\\experimental\\ops\\data_service_ops.py&quot;, line 27, in &lt;module&gt;    from tensorflow.python.data.experimental.ops import compression_ops  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\data\\experimental\\ops\\compression_ops.py&quot;, line 20, in &lt;module&gt;    from tensorflow.python.data.util import structure  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\data\\util\\structure.py&quot;, line 26, in &lt;module&gt;    from tensorflow.python.data.util import nest  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\data\\util\\nest.py&quot;, line 40, in &lt;module&gt;    from tensorflow.python.framework import sparse_tensor as _sparse_tensor  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\framework\\sparse_tensor.py&quot;, line 28, in &lt;module&gt;    from tensorflow.python.framework import constant_op  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\framework\\constant_op.py&quot;, line 29, in &lt;module&gt;    from tensorflow.python.eager import execute  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\eager\\execute.py&quot;, line 27, in &lt;module&gt;    from tensorflow.python.framework import dtypes  File &quot;C:\\Users\\asus\\.conda\\envs\\tensorflow2\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py&quot;, line 33, in &lt;module&gt;    _np_bfloat16 = _pywrap_bfloat16.TF_bfloat16_type()TypeError: Unable to convert function return value to a Python type! The signature was        () -&gt; handle&gt;&gt;&gt;\n\n输入exit()退出python环境，回到虚拟环境下载以下包\npip install numpy==1.21.6 -i https://pypi.tuna.tsinghua.edu.cn/simple/\n\nsuccessfully installed numpy-1.21.6即为下载成功\n进入python环境，输入\nimport tensorflow as tf\n\ntf.__version__\n\ntf.test.is_gpu_available()\n\n查看版本2.7.0，版本正确。末尾显示True，TensorFlow检测到可用的GPU，安装成功，exit()退出python环境。\n也可以进入ipython环境，输入\nimport tensorflow as tf\n\ntf.__version__\n\ntf.test.is_gpu_available()\n\n末尾显示True，检测到可用GPU，安装成功。末尾显示False，TensorFlow没有检测到可用的GPU。可能是这个虚拟环境没有ipython，可能用了其他环境的ipython。解决方案，可以在虚拟环境中用pip list查看虚拟环境中是否有ipython，要是没有，需要安装一个，然后就可以解决了。\n退出tensorflow环境：\nconda deactivate\n\n同时，conda控制台是默认打开base环境的，如果想管理这一设置:\nconda config --set auto_activate_base false / true\n\n测试 Tensorflow-gpu 是否安装成功\n打开Anaconda，选择tensorflow环境，打开spyder，第一次打开需要安装Spyder，直接点下方的install即可。\n输入以下测试代码：\n\nimport tensorflow as tfprint(tf.__version__)print(tf.test.gpu_device_name())print(tf.config.experimental.set_visible_devices)print(&#x27;GPU:&#x27;, tf.config.list_physical_devices(&#x27;GPU&#x27;))print(&#x27;CPU:&#x27;, tf.config.list_physical_devices(device_type=&#x27;CPU&#x27;))print(tf.config.list_physical_devices(&#x27;GPU&#x27;))print(tf.test.is_gpu_available())# 输出可用的GPU数量print(&quot;Num GPUs Available: &quot;, len(tf.config.experimental.list_physical_devices(&#x27;GPU&#x27;)))# 查询GPU设备\n\n出现了当前环境tensorflow的版本以及一些其他信息，我的版本是2.7.0，如果下面出现了True， 那就表明我们的tensorflow-gpu 已经成功的安装好并且能够正常使用了！\n2.7.0/device:GPU:0&lt;function set_visible_devices at 0x0000024D19BB4D30&gt;GPU: [PhysicalDevice(name=&#x27;/physical_device:GPU:0&#x27;, device_type=&#x27;GPU&#x27;)]CPU: [PhysicalDevice(name=&#x27;/physical_device:CPU:0&#x27;, device_type=&#x27;CPU&#x27;)][PhysicalDevice(name=&#x27;/physical_device:GPU:0&#x27;, device_type=&#x27;GPU&#x27;)]WARNING:tensorflow:From c:\\users\\86180\\.spyder-py3\\temp.py:9: is_gpu_available (from tensorflow.python.framework.test_util) is deprecated and will be removed in a future version.Instructions for updating:Use `tf.config.list_physical_devices(&#x27;GPU&#x27;)` instead.TrueNum GPUs Available:  1\n\n(如果出现true但是可以GPU显示0，可以重启电脑试试)3. 下面来测试一下GPU的运算速度\nimport tensorflow as tfimport timeit #指定在cpu上运行def cpu_run():    with tf.device(&#x27;/cpu:0&#x27;):        cpu_a = tf.random.normal([10000, 1000])        cpu_b = tf.random.normal([1000, 2000])        c = tf.matmul(cpu_a, cpu_b)    return c #指定在gpu上运行 def gpu_run():    with tf.device(&#x27;/gpu:0&#x27;):        gpu_a = tf.random.normal([10000, 1000])        gpu_b = tf.random.normal([1000, 2000])        c = tf.matmul(gpu_a, gpu_b)    return ccpu_time = timeit.timeit(cpu_run, number=10)gpu_time = timeit.timeit(gpu_run, number=10)print(&quot;cpu:&quot;, cpu_time, &quot;  gpu:&quot;, gpu_time)\n\n%runfile C:/Users/86180/.spyder-py3/temp.py --wdircpu: 0.9072487999999339   gpu: 0.002821400000016183\n\n可以看到gpu的速度比cpu还是要快上不少的。到这里tensorflow的安装就结束了。\n卸载重装如果安装出错可以卸载重装：tensorflow-gpu卸载\n","categories":["note"],"tags":["python","AI","tensorflow"]},{"title":"game","url":"/game/index.html","content":""},{"title":"archives","url":"/archives/index-1.html","content":""},{"title":"archives","url":"/archives/index.html","content":""}]